
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00800060  00003302  00003396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001f2  008001f2  00003528  2**0
                  ALLOC
  3 .stab         00002ee0  00000000  00000000  00003528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ecf  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000072d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00007628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <main>
      8a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ed       	ldi	r26, 0xD5	; 213
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ed       	ldi	r24, 0xD5	; 213
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e3 52       	subi	r30, 0x23	; 35
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_vidSetPinVal>:
#include "LIB/BIT_MATH.h"
#include "DIO_Interface.h"
#include "DIO_Priv.h"

void DIO_vidSetPinVal(u8 PortId, u8 PinId, u8 val)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	27 97       	sbiw	r28, 0x07	; 7
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	6a 83       	std	Y+2, r22	; 0x02
     cb8:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <DIO_vidSetPinVal+0x22>
     cc0:	ee c0       	rjmp	.+476    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	08 f0       	brcs	.+2      	; 0xcca <DIO_vidSetPinVal+0x2a>
     cc8:	ea c0       	rjmp	.+468    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
	{
		if (val == DIO_LOW)
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	88 23       	and	r24, r24
     cce:	09 f0       	breq	.+2      	; 0xcd2 <DIO_vidSetPinVal+0x32>
     cd0:	74 c0       	rjmp	.+232    	; 0xdba <DIO_vidSetPinVal+0x11a>
		{
			switch(PortId)
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	3f 83       	std	Y+7, r19	; 0x07
     cda:	2e 83       	std	Y+6, r18	; 0x06
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	9f 81       	ldd	r25, Y+7	; 0x07
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	91 05       	cpc	r25, r1
     ce4:	59 f1       	breq	.+86     	; 0xd3c <DIO_vidSetPinVal+0x9c>
     ce6:	2e 81       	ldd	r18, Y+6	; 0x06
     ce8:	3f 81       	ldd	r19, Y+7	; 0x07
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	2c f4       	brge	.+10     	; 0xcfa <DIO_vidSetPinVal+0x5a>
     cf0:	8e 81       	ldd	r24, Y+6	; 0x06
     cf2:	9f 81       	ldd	r25, Y+7	; 0x07
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f0       	breq	.+26     	; 0xd12 <DIO_vidSetPinVal+0x72>
     cf8:	d2 c0       	rjmp	.+420    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
     cfa:	2e 81       	ldd	r18, Y+6	; 0x06
     cfc:	3f 81       	ldd	r19, Y+7	; 0x07
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	89 f1       	breq	.+98     	; 0xd66 <DIO_vidSetPinVal+0xc6>
     d04:	8e 81       	ldd	r24, Y+6	; 0x06
     d06:	9f 81       	ldd	r25, Y+7	; 0x07
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <DIO_vidSetPinVal+0x70>
     d0e:	40 c0       	rjmp	.+128    	; 0xd90 <DIO_vidSetPinVal+0xf0>
     d10:	c6 c0       	rjmp	.+396    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(PORTA_REG, PinId); break ;
     d12:	ab e3       	ldi	r26, 0x3B	; 59
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e3       	ldi	r30, 0x3B	; 59
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_vidSetPinVal+0x90>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_vidSetPinVal+0x8c>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	b1 c0       	rjmp	.+354    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTB: CLR_BIT(PORTB_REG, PinId); break ;
     d3c:	a8 e3       	ldi	r26, 0x38	; 56
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e8 e3       	ldi	r30, 0x38	; 56
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_vidSetPinVal+0xba>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_vidSetPinVal+0xb6>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	9c c0       	rjmp	.+312    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTC: CLR_BIT(PORTC_REG, PinId); break ;
     d66:	a5 e3       	ldi	r26, 0x35	; 53
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e5 e3       	ldi	r30, 0x35	; 53
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_vidSetPinVal+0xe4>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_vidSetPinVal+0xe0>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	87 c0       	rjmp	.+270    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTD: CLR_BIT(PORTD_REG, PinId); break ;
     d90:	a2 e3       	ldi	r26, 0x32	; 50
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e2 e3       	ldi	r30, 0x32	; 50
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_vidSetPinVal+0x10e>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_vidSetPinVal+0x10a>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	72 c0       	rjmp	.+228    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			}
		}
		else if (val == DIO_HIGH)
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <DIO_vidSetPinVal+0x122>
     dc0:	6e c0       	rjmp	.+220    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
		{
			switch(PortId)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3d 83       	std	Y+5, r19	; 0x05
     dca:	2c 83       	std	Y+4, r18	; 0x04
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	49 f1       	breq	.+82     	; 0xe28 <DIO_vidSetPinVal+0x188>
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <DIO_vidSetPinVal+0x14a>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	61 f0       	breq	.+24     	; 0xe00 <DIO_vidSetPinVal+0x160>
     de8:	5a c0       	rjmp	.+180    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	3d 81       	ldd	r19, Y+5	; 0x05
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	71 f1       	breq	.+92     	; 0xe50 <DIO_vidSetPinVal+0x1b0>
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	e9 f1       	breq	.+122    	; 0xe78 <DIO_vidSetPinVal+0x1d8>
     dfe:	4f c0       	rjmp	.+158    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG, PinId); break ;
     e00:	ab e3       	ldi	r26, 0x3B	; 59
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e3       	ldi	r30, 0x3B	; 59
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_vidSetPinVal+0x17e>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_vidSetPinVal+0x17a>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	3b c0       	rjmp	.+118    	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTB: SET_BIT(PORTB_REG, PinId); break ;
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_vidSetPinVal+0x1a6>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_vidSetPinVal+0x1a2>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	27 c0       	rjmp	.+78     	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTC: SET_BIT(PORTC_REG, PinId); break ;
     e50:	a5 e3       	ldi	r26, 0x35	; 53
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e5 e3       	ldi	r30, 0x35	; 53
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_vidSetPinVal+0x1ce>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_vidSetPinVal+0x1ca>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	13 c0       	rjmp	.+38     	; 0xe9e <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTD: SET_BIT(PORTD_REG, PinId); break ;
     e78:	a2 e3       	ldi	r26, 0x32	; 50
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e2 e3       	ldi	r30, 0x32	; 50
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_vidSetPinVal+0x1f6>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_vidSetPinVal+0x1f2>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
	}
	else
	{
		//report error
	}
}
     e9e:	27 96       	adiw	r28, 0x07	; 7
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <DIO_vidSetPinDir>:

void DIO_vidSetPinDir(u8 PortId, u8 PinId, u8 dir)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	27 97       	sbiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	6a 83       	std	Y+2, r22	; 0x02
     ec8:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	08 f0       	brcs	.+2      	; 0xed2 <DIO_vidSetPinDir+0x22>
     ed0:	ee c0       	rjmp	.+476    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_vidSetPinDir+0x2a>
     ed8:	ea c0       	rjmp	.+468    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
		{
			if (dir == DIO_INPUT)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	88 23       	and	r24, r24
     ede:	09 f0       	breq	.+2      	; 0xee2 <DIO_vidSetPinDir+0x32>
     ee0:	74 c0       	rjmp	.+232    	; 0xfca <DIO_vidSetPinDir+0x11a>
			{
				switch(PortId)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3f 83       	std	Y+7, r19	; 0x07
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	91 05       	cpc	r25, r1
     ef4:	59 f1       	breq	.+86     	; 0xf4c <DIO_vidSetPinDir+0x9c>
     ef6:	2e 81       	ldd	r18, Y+6	; 0x06
     ef8:	3f 81       	ldd	r19, Y+7	; 0x07
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	2c f4       	brge	.+10     	; 0xf0a <DIO_vidSetPinDir+0x5a>
     f00:	8e 81       	ldd	r24, Y+6	; 0x06
     f02:	9f 81       	ldd	r25, Y+7	; 0x07
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f0       	breq	.+26     	; 0xf22 <DIO_vidSetPinDir+0x72>
     f08:	d2 c0       	rjmp	.+420    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
     f0a:	2e 81       	ldd	r18, Y+6	; 0x06
     f0c:	3f 81       	ldd	r19, Y+7	; 0x07
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	89 f1       	breq	.+98     	; 0xf76 <DIO_vidSetPinDir+0xc6>
     f14:	8e 81       	ldd	r24, Y+6	; 0x06
     f16:	9f 81       	ldd	r25, Y+7	; 0x07
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_vidSetPinDir+0x70>
     f1e:	40 c0       	rjmp	.+128    	; 0xfa0 <DIO_vidSetPinDir+0xf0>
     f20:	c6 c0       	rjmp	.+396    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				{
					case DIO_PORTA: CLR_BIT(DDRA_REG, PinId); break ;
     f22:	aa e3       	ldi	r26, 0x3A	; 58
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e3       	ldi	r30, 0x3A	; 58
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_vidSetPinDir+0x90>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_vidSetPinDir+0x8c>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	b1 c0       	rjmp	.+354    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTB: CLR_BIT(DDRB_REG, PinId); break ;
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vidSetPinDir+0xba>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vidSetPinDir+0xb6>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	9c c0       	rjmp	.+312    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTC: CLR_BIT(DDRC_REG, PinId); break ;
     f76:	a4 e3       	ldi	r26, 0x34	; 52
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e4 e3       	ldi	r30, 0x34	; 52
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_vidSetPinDir+0xe4>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_vidSetPinDir+0xe0>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	87 c0       	rjmp	.+270    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTD: CLR_BIT(DDRD_REG, PinId); break ;
     fa0:	a1 e3       	ldi	r26, 0x31	; 49
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e1 e3       	ldi	r30, 0x31	; 49
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_vidSetPinDir+0x10e>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_vidSetPinDir+0x10a>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	72 c0       	rjmp	.+228    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				}
			}
			else if (dir == DIO_OUTPUT)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <DIO_vidSetPinDir+0x122>
     fd0:	6e c0       	rjmp	.+220    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
			{
				switch(PortId)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3d 83       	std	Y+5, r19	; 0x05
     fda:	2c 83       	std	Y+4, r18	; 0x04
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	49 f1       	breq	.+82     	; 0x1038 <DIO_vidSetPinDir+0x188>
     fe6:	2c 81       	ldd	r18, Y+4	; 0x04
     fe8:	3d 81       	ldd	r19, Y+5	; 0x05
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <DIO_vidSetPinDir+0x14a>
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	9d 81       	ldd	r25, Y+5	; 0x05
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	61 f0       	breq	.+24     	; 0x1010 <DIO_vidSetPinDir+0x160>
     ff8:	5a c0       	rjmp	.+180    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
     ffa:	2c 81       	ldd	r18, Y+4	; 0x04
     ffc:	3d 81       	ldd	r19, Y+5	; 0x05
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	71 f1       	breq	.+92     	; 0x1060 <DIO_vidSetPinDir+0x1b0>
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	91 05       	cpc	r25, r1
    100c:	e9 f1       	breq	.+122    	; 0x1088 <DIO_vidSetPinDir+0x1d8>
    100e:	4f c0       	rjmp	.+158    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				{
				case DIO_PORTA: SET_BIT(DDRA_REG, PinId); break ;
    1010:	aa e3       	ldi	r26, 0x3A	; 58
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ea e3       	ldi	r30, 0x3A	; 58
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_vidSetPinDir+0x17e>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_vidSetPinDir+0x17a>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	3b c0       	rjmp	.+118    	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTB: SET_BIT(DDRB_REG, PinId); break ;
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_vidSetPinDir+0x1a6>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_vidSetPinDir+0x1a2>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	27 c0       	rjmp	.+78     	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTC: SET_BIT(DDRC_REG, PinId); break ;
    1060:	a4 e3       	ldi	r26, 0x34	; 52
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e3       	ldi	r30, 0x34	; 52
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_vidSetPinDir+0x1ce>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_vidSetPinDir+0x1ca>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTD: SET_BIT(DDRD_REG, PinId); break ;
    1088:	a1 e3       	ldi	r26, 0x31	; 49
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e1 e3       	ldi	r30, 0x31	; 49
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_vidSetPinDir+0x1f6>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_vidSetPinDir+0x1f2>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
		}
		else
		{
			//report error
		}
}
    10ae:	27 96       	adiw	r28, 0x07	; 7
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 PortId, u8 val)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_vidSetPortVal+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_vidSetPortVal+0x8>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId <= DIO_PORTD)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	90 f5       	brcc	.+100    	; 0x113a <DIO_vidSetPortVal+0x7a>
	{
		switch(PortId)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3c 83       	std	Y+4, r19	; 0x04
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	d1 f0       	breq	.+52     	; 0x111e <DIO_vidSetPortVal+0x5e>
    10ea:	2b 81       	ldd	r18, Y+3	; 0x03
    10ec:	3c 81       	ldd	r19, Y+4	; 0x04
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <DIO_vidSetPortVal+0x3e>
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	61 f0       	breq	.+24     	; 0x1114 <DIO_vidSetPortVal+0x54>
    10fc:	1e c0       	rjmp	.+60     	; 0x113a <DIO_vidSetPortVal+0x7a>
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_vidSetPortVal+0x68>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	81 f0       	breq	.+32     	; 0x1132 <DIO_vidSetPortVal+0x72>
    1112:	13 c0       	rjmp	.+38     	; 0x113a <DIO_vidSetPortVal+0x7a>
		{
			case DIO_PORTA: PORTA_REG = val; break;
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 83       	st	Z, r24
    111c:	0e c0       	rjmp	.+28     	; 0x113a <DIO_vidSetPortVal+0x7a>
			case DIO_PORTB: PORTB_REG = val; break;
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	09 c0       	rjmp	.+18     	; 0x113a <DIO_vidSetPortVal+0x7a>
			case DIO_PORTC: PORTC_REG = val; break;
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	04 c0       	rjmp	.+8      	; 0x113a <DIO_vidSetPortVal+0x7a>
			case DIO_PORTD: PORTD_REG = val; break;
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
	}
	else
	{
		//report error
	}
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 PortId, u8 dir)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_vidSetPortDir+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_vidSetPortDir+0x8>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId <= DIO_PORTD)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	90 f5       	brcc	.+100    	; 0x11c2 <DIO_vidSetPortDir+0x7a>
		{
			switch(PortId)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3c 83       	std	Y+4, r19	; 0x04
    1166:	2b 83       	std	Y+3, r18	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <DIO_vidSetPortDir+0x5e>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <DIO_vidSetPortDir+0x3e>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <DIO_vidSetPortDir+0x54>
    1184:	1e c0       	rjmp	.+60     	; 0x11c2 <DIO_vidSetPortDir+0x7a>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <DIO_vidSetPortDir+0x68>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <DIO_vidSetPortDir+0x72>
    119a:	13 c0       	rjmp	.+38     	; 0x11c2 <DIO_vidSetPortDir+0x7a>
			{
				case DIO_PORTA: DDRA_REG = dir; break;
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <DIO_vidSetPortDir+0x7a>
				case DIO_PORTB: DDRB_REG = dir; break;
    11a6:	e7 e3       	ldi	r30, 0x37	; 55
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <DIO_vidSetPortDir+0x7a>
				case DIO_PORTC: DDRC_REG = dir; break;
    11b0:	e4 e3       	ldi	r30, 0x34	; 52
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <DIO_vidSetPortDir+0x7a>
				case DIO_PORTD: DDRD_REG = dir; break;
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
		}
		else
		{
			//report error
		}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 PortId, u8 PinId)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_u8GetPinVal+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_u8GetPinVal+0x8>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val=255;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <DIO_u8GetPinVal+0x1e>
    11ec:	6b c0       	rjmp	.+214    	; 0x12c4 <DIO_u8GetPinVal+0xf4>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <DIO_u8GetPinVal+0x26>
    11f4:	67 c0       	rjmp	.+206    	; 0x12c4 <DIO_u8GetPinVal+0xf4>
		{
			switch(PortId)
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3d 83       	std	Y+5, r19	; 0x05
    11fe:	2c 83       	std	Y+4, r18	; 0x04
    1200:	4c 81       	ldd	r20, Y+4	; 0x04
    1202:	5d 81       	ldd	r21, Y+5	; 0x05
    1204:	41 30       	cpi	r20, 0x01	; 1
    1206:	51 05       	cpc	r21, r1
    1208:	41 f1       	breq	.+80     	; 0x125a <DIO_u8GetPinVal+0x8a>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	91 05       	cpc	r25, r1
    1212:	34 f4       	brge	.+12     	; 0x1220 <DIO_u8GetPinVal+0x50>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	61 f0       	breq	.+24     	; 0x1236 <DIO_u8GetPinVal+0x66>
    121e:	52 c0       	rjmp	.+164    	; 0x12c4 <DIO_u8GetPinVal+0xf4>
    1220:	4c 81       	ldd	r20, Y+4	; 0x04
    1222:	5d 81       	ldd	r21, Y+5	; 0x05
    1224:	42 30       	cpi	r20, 0x02	; 2
    1226:	51 05       	cpc	r21, r1
    1228:	51 f1       	breq	.+84     	; 0x127e <DIO_u8GetPinVal+0xae>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	b9 f1       	breq	.+110    	; 0x12a2 <DIO_u8GetPinVal+0xd2>
    1234:	47 c0       	rjmp	.+142    	; 0x12c4 <DIO_u8GetPinVal+0xf4>
			{
			case DIO_PORTA:	ret_val= GET_BIT(PINA_REG,PinId); break;
    1236:	e9 e3       	ldi	r30, 0x39	; 57
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_u8GetPinVal+0x7e>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_u8GetPinVal+0x7a>
    1252:	ca 01       	movw	r24, r20
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	35 c0       	rjmp	.+106    	; 0x12c4 <DIO_u8GetPinVal+0xf4>
			case DIO_PORTB: ret_val= GET_BIT(PINB_REG,PinId); break;
    125a:	e6 e3       	ldi	r30, 0x36	; 54
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8GetPinVal+0xa2>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8GetPinVal+0x9e>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	23 c0       	rjmp	.+70     	; 0x12c4 <DIO_u8GetPinVal+0xf4>
			case DIO_PORTC: ret_val= GET_BIT(PINC_REG,PinId); break;
    127e:	e3 e3       	ldi	r30, 0x33	; 51
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8GetPinVal+0xc6>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8GetPinVal+0xc2>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <DIO_u8GetPinVal+0xf4>
			case DIO_PORTD: ret_val= GET_BIT(PIND_REG,PinId); break;
    12a2:	e0 e3       	ldi	r30, 0x30	; 48
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8GetPinVal+0xea>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8GetPinVal+0xe6>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
		}
	else
	{
		//Report error
	}
	return ret_val;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <GIE_voidEnable>:
#include "LIB/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    12de:	af e5       	ldi	r26, 0x5F	; 95
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ef e5       	ldi	r30, 0x5F	; 95
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    12fa:	af e5       	ldi	r26, 0x5F	; 95
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ef e5       	ldi	r30, 0x5F	; 95
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 77       	andi	r24, 0x7F	; 127
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <KPD_u8GetPressedKey>:
		{'7', '8', '9', '*'},
		{'/', '0', 'B', '='}
};

u8 KPD_u8GetPressedKey (void)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	62 97       	sbiw	r28, 0x12	; 18
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61

	u8 u8SwitchVal=NOT_PRESSED ;
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	89 8b       	std	Y+17, r24	; 0x11
	u8 u8Column;
	u8 u8Row;

	for(u8Column=0 ; u8Column<4 ; u8Column++)
    1326:	18 8a       	std	Y+16, r1	; 0x10
    1328:	aa c0       	rjmp	.+340    	; 0x147e <KPD_u8GetPressedKey+0x170>
	{
		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_LOW);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	68 89       	ldd	r22, Y+16	; 0x10
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>

		for(u8Row=0 ; u8Row<4 ; u8Row++)
    1334:	1f 86       	std	Y+15, r1	; 0x0f
    1336:	97 c0       	rjmp	.+302    	; 0x1466 <KPD_u8GetPressedKey+0x158>
		{

			if ((DIO_u8GetPinVal(ROW_PORT,u8Row))==DIO_LOW)
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	6f 85       	ldd	r22, Y+15	; 0x0f
    133c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <DIO_u8GetPinVal>
    1340:	88 23       	and	r24, r24
    1342:	09 f0       	breq	.+2      	; 0x1346 <KPD_u8GetPressedKey+0x38>
    1344:	8d c0       	rjmp	.+282    	; 0x1460 <KPD_u8GetPressedKey+0x152>
			{
				u8SwitchVal = KPD_au8Array[(u8Row)][u8Column] ;
    1346:	8f 85       	ldd	r24, Y+15	; 0x0f
    1348:	48 2f       	mov	r20, r24
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	88 89       	ldd	r24, Y+16	; 0x10
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	ca 01       	movw	r24, r20
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	fc 01       	movw	r30, r24
    1362:	ef 51       	subi	r30, 0x1F	; 31
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	80 81       	ld	r24, Z
    1368:	89 8b       	std	Y+17, r24	; 0x11
				while (DIO_u8GetPinVal(ROW_PORT,u8Row)==DIO_LOW);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	6f 85       	ldd	r22, Y+15	; 0x0f
    136e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <DIO_u8GetPinVal>
    1372:	88 23       	and	r24, r24
    1374:	d1 f3       	breq	.-12     	; 0x136a <KPD_u8GetPressedKey+0x5c>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b1 e4       	ldi	r27, 0x41	; 65
    137e:	8b 87       	std	Y+11, r24	; 0x0b
    1380:	9c 87       	std	Y+12, r25	; 0x0c
    1382:	ad 87       	std	Y+13, r26	; 0x0d
    1384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8f 83       	std	Y+7, r24	; 0x07
    13a0:	98 87       	std	Y+8, r25	; 0x08
    13a2:	a9 87       	std	Y+9, r26	; 0x09
    13a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <KPD_u8GetPressedKey+0xba>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <KPD_u8GetPressedKey+0x138>
	else if (__tmp > 65535)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <KPD_u8GetPressedKey+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <KPD_u8GetPressedKey+0x11a>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <KPD_u8GetPressedKey+0x108>
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <KPD_u8GetPressedKey+0xfc>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <KPD_u8GetPressedKey+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <KPD_u8GetPressedKey+0x144>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(10);
				return u8SwitchVal;
    145a:	89 89       	ldd	r24, Y+17	; 0x11
    145c:	8a 8b       	std	Y+18, r24	; 0x12
    145e:	15 c0       	rjmp	.+42     	; 0x148a <KPD_u8GetPressedKey+0x17c>

	for(u8Column=0 ; u8Column<4 ; u8Column++)
	{
		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_LOW);

		for(u8Row=0 ; u8Row<4 ; u8Row++)
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	8f 87       	std	Y+15, r24	; 0x0f
    1466:	8f 85       	ldd	r24, Y+15	; 0x0f
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	08 f4       	brcc	.+2      	; 0x146e <KPD_u8GetPressedKey+0x160>
    146c:	65 cf       	rjmp	.-310    	; 0x1338 <KPD_u8GetPressedKey+0x2a>
				return u8SwitchVal;
			}

		}

		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_HIGH);
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	68 89       	ldd	r22, Y+16	; 0x10
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>

	u8 u8SwitchVal=NOT_PRESSED ;
	u8 u8Column;
	u8 u8Row;

	for(u8Column=0 ; u8Column<4 ; u8Column++)
    1478:	88 89       	ldd	r24, Y+16	; 0x10
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	88 8b       	std	Y+16, r24	; 0x10
    147e:	88 89       	ldd	r24, Y+16	; 0x10
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f4       	brcc	.+2      	; 0x1486 <KPD_u8GetPressedKey+0x178>
    1484:	52 cf       	rjmp	.-348    	; 0x132a <KPD_u8GetPressedKey+0x1c>

		}

		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_HIGH);
	}
	return u8SwitchVal;
    1486:	89 89       	ldd	r24, Y+17	; 0x11
    1488:	8a 8b       	std	Y+18, r24	; 0x12
    148a:	8a 89       	ldd	r24, Y+18	; 0x12

}
    148c:	62 96       	adiw	r28, 0x12	; 18
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <HLCD_voidInit>:
#include "LCD_Priv.h"
#include "LCD_Config.h"
#include <avr/delay.h>

void HLCD_voidInit(void)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	e8 97       	sbiw	r28, 0x38	; 56
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a8 ec       	ldi	r26, 0xC8	; 200
    14b8:	b2 e4       	ldi	r27, 0x42	; 66
    14ba:	8d ab       	std	Y+53, r24	; 0x35
    14bc:	9e ab       	std	Y+54, r25	; 0x36
    14be:	af ab       	std	Y+55, r26	; 0x37
    14c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6d a9       	ldd	r22, Y+53	; 0x35
    14c4:	7e a9       	ldd	r23, Y+54	; 0x36
    14c6:	8f a9       	ldd	r24, Y+55	; 0x37
    14c8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a ef       	ldi	r20, 0xFA	; 250
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	89 ab       	std	Y+49, r24	; 0x31
    14dc:	9a ab       	std	Y+50, r25	; 0x32
    14de:	ab ab       	std	Y+51, r26	; 0x33
    14e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14e2:	69 a9       	ldd	r22, Y+49	; 0x31
    14e4:	7a a9       	ldd	r23, Y+50	; 0x32
    14e6:	8b a9       	ldd	r24, Y+51	; 0x33
    14e8:	9c a9       	ldd	r25, Y+52	; 0x34
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <HLCD_voidInit+0x66>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	98 ab       	std	Y+48, r25	; 0x30
    1500:	8f a7       	std	Y+47, r24	; 0x2f
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1504:	69 a9       	ldd	r22, Y+49	; 0x31
    1506:	7a a9       	ldd	r23, Y+50	; 0x32
    1508:	8b a9       	ldd	r24, Y+51	; 0x33
    150a:	9c a9       	ldd	r25, Y+52	; 0x34
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6d a9       	ldd	r22, Y+53	; 0x35
    151e:	7e a9       	ldd	r23, Y+54	; 0x36
    1520:	8f a9       	ldd	r24, Y+55	; 0x37
    1522:	98 ad       	ldd	r25, Y+56	; 0x38
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	98 ab       	std	Y+48, r25	; 0x30
    1542:	8f a7       	std	Y+47, r24	; 0x2f
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <HLCD_voidInit+0xc6>
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e a7       	std	Y+46, r25	; 0x2e
    154c:	8d a7       	std	Y+45, r24	; 0x2d
    154e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1550:	9e a5       	ldd	r25, Y+46	; 0x2e
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <HLCD_voidInit+0xb4>
    1556:	9e a7       	std	Y+46, r25	; 0x2e
    1558:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8f a5       	ldd	r24, Y+47	; 0x2f
    155c:	98 a9       	ldd	r25, Y+48	; 0x30
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	98 ab       	std	Y+48, r25	; 0x30
    1562:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <HLCD_voidInit+0xa8>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	69 a9       	ldd	r22, Y+49	; 0x31
    1570:	7a a9       	ldd	r23, Y+50	; 0x32
    1572:	8b a9       	ldd	r24, Y+51	; 0x33
    1574:	9c a9       	ldd	r25, Y+52	; 0x34
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	98 ab       	std	Y+48, r25	; 0x30
    1580:	8f a7       	std	Y+47, r24	; 0x2f
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	9c a7       	std	Y+44, r25	; 0x2c
    1588:	8b a7       	std	Y+43, r24	; 0x2b
    158a:	8b a5       	ldd	r24, Y+43	; 0x2b
    158c:	9c a5       	ldd	r25, Y+44	; 0x2c
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <HLCD_voidInit+0xf0>
    1592:	9c a7       	std	Y+44, r25	; 0x2c
    1594:	8b a7       	std	Y+43, r24	; 0x2b



	_delay_ms(100);
	HLCD_voidSendCommand(FUNCTION_SET_8BIT);
    1596:	88 e3       	ldi	r24, 0x38	; 56
    1598:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e4       	ldi	r27, 0x40	; 64
    15a4:	8f a3       	std	Y+39, r24	; 0x27
    15a6:	98 a7       	std	Y+40, r25	; 0x28
    15a8:	a9 a7       	std	Y+41, r26	; 0x29
    15aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	6f a1       	ldd	r22, Y+39	; 0x27
    15ae:	78 a5       	ldd	r23, Y+40	; 0x28
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a ef       	ldi	r20, 0xFA	; 250
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8b a3       	std	Y+35, r24	; 0x23
    15c6:	9c a3       	std	Y+36, r25	; 0x24
    15c8:	ad a3       	std	Y+37, r26	; 0x25
    15ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15cc:	6b a1       	ldd	r22, Y+35	; 0x23
    15ce:	7c a1       	ldd	r23, Y+36	; 0x24
    15d0:	8d a1       	ldd	r24, Y+37	; 0x25
    15d2:	9e a1       	ldd	r25, Y+38	; 0x26
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <HLCD_voidInit+0x150>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9a a3       	std	Y+34, r25	; 0x22
    15ea:	89 a3       	std	Y+33, r24	; 0x21
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    15ee:	6b a1       	ldd	r22, Y+35	; 0x23
    15f0:	7c a1       	ldd	r23, Y+36	; 0x24
    15f2:	8d a1       	ldd	r24, Y+37	; 0x25
    15f4:	9e a1       	ldd	r25, Y+38	; 0x26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	6f a1       	ldd	r22, Y+39	; 0x27
    1608:	78 a5       	ldd	r23, Y+40	; 0x28
    160a:	89 a5       	ldd	r24, Y+41	; 0x29
    160c:	9a a5       	ldd	r25, Y+42	; 0x2a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	0f c0       	rjmp	.+30     	; 0x164e <HLCD_voidInit+0x1b0>
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 a3       	std	Y+32, r25	; 0x20
    1636:	8f 8f       	std	Y+31, r24	; 0x1f
    1638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    163a:	98 a1       	ldd	r25, Y+32	; 0x20
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <HLCD_voidInit+0x19e>
    1640:	98 a3       	std	Y+32, r25	; 0x20
    1642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	89 a1       	ldd	r24, Y+33	; 0x21
    1650:	9a a1       	ldd	r25, Y+34	; 0x22
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <HLCD_voidInit+0x192>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <HLCD_voidInit+0x1da>
    167c:	9e 8f       	std	Y+30, r25	; 0x1e
    167e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_DISPLAY);
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e4       	ldi	r27, 0x40	; 64
    168e:	89 8f       	std	Y+25, r24	; 0x19
    1690:	9a 8f       	std	Y+26, r25	; 0x1a
    1692:	ab 8f       	std	Y+27, r26	; 0x1b
    1694:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8d 8b       	std	Y+21, r24	; 0x15
    16b0:	9e 8b       	std	Y+22, r25	; 0x16
    16b2:	af 8b       	std	Y+23, r26	; 0x17
    16b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <HLCD_voidInit+0x23a>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	69 8d       	ldd	r22, Y+25	; 0x19
    16f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <HLCD_voidInit+0x29a>
    171a:	88 ec       	ldi	r24, 0xC8	; 200
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9a 8b       	std	Y+18, r25	; 0x12
    1720:	89 8b       	std	Y+17, r24	; 0x11
    1722:	89 89       	ldd	r24, Y+17	; 0x11
    1724:	9a 89       	ldd	r25, Y+18	; 0x12
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <HLCD_voidInit+0x288>
    172a:	9a 8b       	std	Y+18, r25	; 0x12
    172c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	9c 8b       	std	Y+20, r25	; 0x14
    1736:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	9c 89       	ldd	r25, Y+20	; 0x14
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <HLCD_voidInit+0x27c>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	8b 89       	ldd	r24, Y+19	; 0x13
    1758:	9c 89       	ldd	r25, Y+20	; 0x14
    175a:	98 8b       	std	Y+16, r25	; 0x10
    175c:	8f 87       	std	Y+15, r24	; 0x0f
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	98 89       	ldd	r25, Y+16	; 0x10
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <HLCD_voidInit+0x2c4>
    1766:	98 8b       	std	Y+16, r25	; 0x10
    1768:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_CLEAR);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e4       	ldi	r27, 0x40	; 64
    1778:	8b 87       	std	Y+11, r24	; 0x0b
    177a:	9c 87       	std	Y+12, r25	; 0x0c
    177c:	ad 87       	std	Y+13, r26	; 0x0d
    177e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8f 83       	std	Y+7, r24	; 0x07
    179a:	98 87       	std	Y+8, r25	; 0x08
    179c:	a9 87       	std	Y+9, r26	; 0x09
    179e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <HLCD_voidInit+0x324>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <HLCD_voidInit+0x384>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <HLCD_voidInit+0x372>
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <HLCD_voidInit+0x366>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <HLCD_voidInit+0x3ae>
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_ENTRYMODE);
    1854:	86 e0       	ldi	r24, 0x06	; 6
    1856:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>

}
    185a:	e8 96       	adiw	r28, 0x38	; 56
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 Copy_u8Cmd)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	2f 97       	sbiw	r28, 0x0f	; 15
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	8f 87       	std	Y+15, r24	; 0x0f
	//RS LOW
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	65 e0       	ldi	r22, 0x05	; 5
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>
	//Command
	DIO_vidSetPortVal(LCD_DATA_PORT,Copy_u8Cmd);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1890:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vidSetPortVal>
	//Enable
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	62 e0       	ldi	r22, 0x02	; 2
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e8       	ldi	r26, 0x80	; 128
    18a4:	bf e3       	ldi	r27, 0x3F	; 63
    18a6:	8b 87       	std	Y+11, r24	; 0x0b
    18a8:	9c 87       	std	Y+12, r25	; 0x0c
    18aa:	ad 87       	std	Y+13, r26	; 0x0d
    18ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8f 83       	std	Y+7, r24	; 0x07
    18c8:	98 87       	std	Y+8, r25	; 0x08
    18ca:	a9 87       	std	Y+9, r26	; 0x09
    18cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <HLCD_voidSendCommand+0x84>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <HLCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <HLCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <HLCD_voidSendCommand+0xe4>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <HLCD_voidSendCommand+0xd2>
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <HLCD_voidSendCommand+0xc6>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <HLCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <HLCD_voidSendCommand+0x10e>
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>

}
    198c:	2f 96       	adiw	r28, 0x0f	; 15
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <HLCD_voidSendChar>:
void HLCD_voidSendChar(u8 Copy_u8Char)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	2f 97       	sbiw	r28, 0x0f	; 15
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
	//RS LOW
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	65 e0       	ldi	r22, 0x05	; 5
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>
	//Command
	DIO_vidSetPortVal(LCD_DATA_PORT,Copy_u8Char);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    19c2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vidSetPortVal>
	//Enable
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e8       	ldi	r26, 0x80	; 128
    19d6:	bf e3       	ldi	r27, 0x3F	; 63
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <HLCD_voidSendChar+0x84>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <HLCD_voidSendChar+0x102>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <HLCD_voidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <HLCD_voidSendChar+0xe4>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <HLCD_voidSendChar+0xd2>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <HLCD_voidSendChar+0xc6>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <HLCD_voidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <HLCD_voidSendChar+0x10e>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinVal>
}
    1abe:	2f 96       	adiw	r28, 0x0f	; 15
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <HLCD_voidGotoxy>:

void HLCD_voidGotoxy(u8 X,u8 Y)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <HLCD_voidGotoxy+0x6>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
	if(Y==0)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	88 23       	and	r24, r24
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <HLCD_voidGotoxy+0x1e>
	{
	HLCD_voidSendCommand(LCD_SETCURSER|X) ;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	80 68       	ori	r24, 0x80	; 128
    1ae8:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <HLCD_voidGotoxy+0x26>
	}
	else
	{
		HLCD_voidSendCommand((LCD_SETCURSER|X) | (0x40)) ;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	80 6c       	ori	r24, 0xC0	; 192
    1af2:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	}

}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8ptrString)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <HLCD_voidSendString+0x6>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0a c0       	rjmp	.+20     	; 0x1b24 <HLCD_voidSendString+0x24>

	while(*Copy_u8ptrString!='\0')
	{
		HLCD_voidSendChar(*Copy_u8ptrString);
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
		Copy_u8ptrString++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_voidSendString(u8 *Copy_u8ptrString)
{

	while(*Copy_u8ptrString!='\0')
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	fa 81       	ldd	r31, Y+2	; 0x02
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	89 f7       	brne	.-30     	; 0x1b10 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendChar(*Copy_u8ptrString);
		Copy_u8ptrString++;

	}
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <LCD_Send_Num>:

void LCD_Send_Num(int num)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	68 97       	sbiw	r28, 0x18	; 24
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	98 8f       	std	Y+24, r25	; 0x18
    1b4e:	8f 8b       	std	Y+23, r24	; 0x17
	int txt[10] = {0};					// Array holds the number in digits
    1b50:	84 e1       	ldi	r24, 0x14	; 20
    1b52:	fe 01       	movw	r30, r28
    1b54:	33 96       	adiw	r30, 0x03	; 3
    1b56:	df 01       	movw	r26, r30
    1b58:	98 2f       	mov	r25, r24
    1b5a:	1d 92       	st	X+, r1
    1b5c:	9a 95       	dec	r25
    1b5e:	e9 f7       	brne	.-6      	; 0x1b5a <LCD_Send_Num+0x22>
	int i = 0;						// Iterator
    1b60:	1a 82       	std	Y+2, r1	; 0x02
    1b62:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <LCD_Send_Num+0x3c>
	{
		HLCD_voidSendChar('0');
    1b6c:	80 e3       	ldi	r24, 0x30	; 48
    1b6e:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
    1b72:	4b c0       	rjmp	.+150    	; 0x1c0a <LCD_Send_Num+0xd2>
		return;
	}
	for(i = 0; num != 0; i++)
    1b74:	1a 82       	std	Y+2, r1	; 0x02
    1b76:	19 82       	std	Y+1, r1	; 0x01
    1b78:	26 c0       	rjmp	.+76     	; 0x1bc6 <LCD_Send_Num+0x8e>
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 21 19 	call	0x3242	; 0x3242 <__divmodhi4>
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	40 5d       	subi	r20, 0xD0	; 208
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	9f 01       	movw	r18, r30
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	ce 01       	movw	r24, r28
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	32 96       	adiw	r30, 0x02	; 2
    1ba4:	51 83       	std	Z+1, r21	; 0x01
    1ba6:	40 83       	st	Z, r20
		num = num/ 10;					// Remove the rightmost digit
    1ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    1baa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	0e 94 21 19 	call	0x3242	; 0x3242 <__divmodhi4>
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	98 8f       	std	Y+24, r25	; 0x18
    1bba:	8f 8b       	std	Y+23, r24	; 0x17
	if(num == 0)
	{
		HLCD_voidSendChar('0');
		return;
	}
	for(i = 0; num != 0; i++)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	b1 f6       	brne	.-84     	; 0x1b7a <LCD_Send_Num+0x42>
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
		num = num/ 10;					// Remove the rightmost digit
	}
	i--;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_Send_Num+0xca>
	while(i >= 0 )
	{
		HLCD_voidSendChar(txt[i]);				// Display the digits in reverse order
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	9c 01       	movw	r18, r24
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	fc 01       	movw	r30, r24
    1bee:	32 96       	adiw	r30, 0x02	; 2
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
		i--;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9a 83       	std	Y+2, r25	; 0x02
    1c00:	89 83       	std	Y+1, r24	; 0x01
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
		num = num/ 10;					// Remove the rightmost digit
	}
	i--;
	while(i >= 0 )
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	99 23       	and	r25, r25
    1c08:	44 f7       	brge	.-48     	; 0x1bda <LCD_Send_Num+0xa2>
	{
		HLCD_voidSendChar(txt[i]);				// Display the digits in reverse order
		i--;
	}
}
    1c0a:	68 96       	adiw	r28, 0x18	; 24
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LCD_Send_Float>:
void LCD_Send_Float(float num)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	2f 97       	sbiw	r28, 0x0f	; 15
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	6c 87       	std	Y+12, r22	; 0x0c
    1c32:	7d 87       	std	Y+13, r23	; 0x0d
    1c34:	8e 87       	std	Y+14, r24	; 0x0e
    1c36:	9f 87       	std	Y+15, r25	; 0x0f
	f32 num2ndPart;
	s32 num1stPart = (u32) num;
    1c38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8c 83       	std	Y+4, r24	; 0x04
    1c4a:	9d 83       	std	Y+5, r25	; 0x05
    1c4c:	ae 83       	std	Y+6, r26	; 0x06
    1c4e:	bf 83       	std	Y+7, r27	; 0x07
	LCD_Send_Num(num1stPart);
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>

	num2ndPart = (f32) num-num1stPart;
    1c58:	6c 81       	ldd	r22, Y+4	; 0x04
    1c5a:	7d 81       	ldd	r23, Y+5	; 0x05
    1c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c60:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1c64:	9b 01       	movw	r18, r22
    1c66:	ac 01       	movw	r20, r24
    1c68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	88 87       	std	Y+8, r24	; 0x08
    1c7a:	99 87       	std	Y+9, r25	; 0x09
    1c7c:	aa 87       	std	Y+10, r26	; 0x0a
    1c7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (num < 0) {
    1c80:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c82:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	4c f4       	brge	.+18     	; 0x1caa <LCD_Send_Float+0x8e>
		num2ndPart = (f32) (-1) * (num2ndPart);
    1c98:	88 85       	ldd	r24, Y+8	; 0x08
    1c9a:	99 85       	ldd	r25, Y+9	; 0x09
    1c9c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c9e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ca0:	b0 58       	subi	r27, 0x80	; 128
    1ca2:	88 87       	std	Y+8, r24	; 0x08
    1ca4:	99 87       	std	Y+9, r25	; 0x09
    1ca6:	aa 87       	std	Y+10, r26	; 0x0a
    1ca8:	bb 87       	std	Y+11, r27	; 0x0b
	}
	if(((f32)num-num1stPart)>0)
    1caa:	6c 81       	ldd	r22, Y+4	; 0x04
    1cac:	7d 81       	ldd	r23, Y+5	; 0x05
    1cae:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <LCD_Send_Float+0xc4>
    1cde:	68 c0       	rjmp	.+208    	; 0x1db0 <LCD_Send_Float+0x194>
	{
		HLCD_voidSendChar('.');
    1ce0:	8e e2       	ldi	r24, 0x2E	; 46
    1ce2:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
			u8 zero_flag=0,temp;
    1ce6:	1b 82       	std	Y+3, r1	; 0x03
			for (u8 i = 1; i <= 4; i++) {
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	5d c0       	rjmp	.+186    	; 0x1da8 <LCD_Send_Float+0x18c>
				num2ndPart = num2ndPart * 10;
    1cee:	68 85       	ldd	r22, Y+8	; 0x08
    1cf0:	79 85       	ldd	r23, Y+9	; 0x09
    1cf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	88 87       	std	Y+8, r24	; 0x08
    1d08:	99 87       	std	Y+9, r25	; 0x09
    1d0a:	aa 87       	std	Y+10, r26	; 0x0a
    1d0c:	bb 87       	std	Y+11, r27	; 0x0b
				 temp = (u8) num2ndPart;
    1d0e:	68 85       	ldd	r22, Y+8	; 0x08
    1d10:	79 85       	ldd	r23, Y+9	; 0x09
    1d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
				if((temp==0)&&zero_flag&&i<=3)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 23       	and	r24, r24
    1d24:	51 f4       	brne	.+20     	; 0x1d3a <LCD_Send_Float+0x11e>
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	88 23       	and	r24, r24
    1d2a:	39 f0       	breq	.+14     	; 0x1d3a <LCD_Send_Float+0x11e>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	84 30       	cpi	r24, 0x04	; 4
    1d30:	20 f4       	brcc	.+8      	; 0x1d3a <LCD_Send_Float+0x11e>
				{
					HLCD_voidSendChar('0');
    1d32:	80 e3       	ldi	r24, 0x30	; 48
    1d34:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
    1d38:	3b c0       	rjmp	.+118    	; 0x1db0 <LCD_Send_Float+0x194>
					break;
				}
				else if(zero_flag&&(temp>0))
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 23       	and	r24, r24
    1d3e:	71 f0       	breq	.+28     	; 0x1d5c <LCD_Send_Float+0x140>
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	88 23       	and	r24, r24
    1d44:	59 f0       	breq	.+22     	; 0x1d5c <LCD_Send_Float+0x140>
				{
					if(temp>=4)
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <LCD_Send_Float+0x138>
						HLCD_voidSendChar('1');
    1d4c:	81 e3       	ldi	r24, 0x31	; 49
    1d4e:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
    1d52:	2e c0       	rjmp	.+92     	; 0x1db0 <LCD_Send_Float+0x194>
					else
						HLCD_voidSendChar('0');
    1d54:	80 e3       	ldi	r24, 0x30	; 48
    1d56:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
    1d5a:	2a c0       	rjmp	.+84     	; 0x1db0 <LCD_Send_Float+0x194>
					break;
				}
				else if(temp==0)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	88 23       	and	r24, r24
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <LCD_Send_Float+0x14c>
				{
					zero_flag=1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <LCD_Send_Float+0x154>
				}
				else
				{
					HLCD_voidSendChar(temp + '0');
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	80 5d       	subi	r24, 0xD0	; 208
    1d6c:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
				}
				num2ndPart = (f32) (num2ndPart - temp);
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	aa 27       	eor	r26, r26
    1d78:	97 fd       	sbrc	r25, 7
    1d7a:	a0 95       	com	r26
    1d7c:	ba 2f       	mov	r27, r26
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1d86:	9b 01       	movw	r18, r22
    1d88:	ac 01       	movw	r20, r24
    1d8a:	68 85       	ldd	r22, Y+8	; 0x08
    1d8c:	79 85       	ldd	r23, Y+9	; 0x09
    1d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d92:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	88 87       	std	Y+8, r24	; 0x08
    1d9c:	99 87       	std	Y+9, r25	; 0x09
    1d9e:	aa 87       	std	Y+10, r26	; 0x0a
    1da0:	bb 87       	std	Y+11, r27	; 0x0b
	}
	if(((f32)num-num1stPart)>0)
	{
		HLCD_voidSendChar('.');
			u8 zero_flag=0,temp;
			for (u8 i = 1; i <= 4; i++) {
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	85 30       	cpi	r24, 0x05	; 5
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <LCD_Send_Float+0x194>
    1dae:	9f cf       	rjmp	.-194    	; 0x1cee <LCD_Send_Float+0xd2>
					HLCD_voidSendChar(temp + '0');
				}
				num2ndPart = (f32) (num2ndPart - temp);
			}
	}
	}
    1db0:	2f 96       	adiw	r28, 0x0f	; 15
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <TIMER0_voidInit>:


static void (*TIMER0_pvCallBackFunc)(void)= NULL ;

void TIMER0_voidInit(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	/*Choose CTC mode*/
	CLR_BIT(TCCR0,TCCR0_WMG00);
    1dca:	a3 e5       	ldi	r26, 0x53	; 83
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e3 e5       	ldi	r30, 0x53	; 83
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7b       	andi	r24, 0xBF	; 191
    1dd6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WMG01);
    1dd8:	a3 e5       	ldi	r26, 0x53	; 83
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e3 e5       	ldi	r30, 0x53	; 83
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	88 60       	ori	r24, 0x08	; 8
    1de4:	8c 93       	st	X, r24

	/*Output compare match interrupt enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    1de6:	a9 e5       	ldi	r26, 0x59	; 89
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 e5       	ldi	r30, 0x59	; 89
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	8c 93       	st	X, r24
	
	/*Set compare match value to 250*/
	OCR0=250;
    1df4:	ec e5       	ldi	r30, 0x5C	; 92
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8a ef       	ldi	r24, 0xFA	; 250
    1dfa:	80 83       	st	Z, r24

	/*Prescaler: Division by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1dfc:	a3 e5       	ldi	r26, 0x53	; 83
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e3 e5       	ldi	r30, 0x53	; 83
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8e 7f       	andi	r24, 0xFE	; 254
    1e08:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1e0a:	a3 e5       	ldi	r26, 0x53	; 83
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e3 e5       	ldi	r30, 0x53	; 83
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	82 60       	ori	r24, 0x02	; 2
    1e16:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1e18:	a3 e5       	ldi	r26, 0x53	; 83
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e3 e5       	ldi	r30, 0x53	; 83
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8b 7f       	andi	r24, 0xFB	; 251
    1e24:	8c 93       	st	X, r24
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <TIMER0_u8SetCallBack+0x6>
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	9b 83       	std	Y+3, r25	; 0x03
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK ;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvCallBackFunc != NULL)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc= Copy_pvCallBackFunc;
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	90 93 f3 01 	sts	0x01F3, r25
    1e4e:	80 93 f2 01 	sts	0x01F2, r24
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_u8ErrorStatus;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_pvCallBackFunc != NULL)
    1e90:	80 91 f2 01 	lds	r24, 0x01F2
    1e94:	90 91 f3 01 	lds	r25, 0x01F3
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    1e9c:	e0 91 f2 01 	lds	r30, 0x01F2
    1ea0:	f0 91 f3 01 	lds	r31, 0x01F3
    1ea4:	09 95       	icall
	}

}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	7f 91       	pop	r23
    1eb8:	6f 91       	pop	r22
    1eba:	5f 91       	pop	r21
    1ebc:	4f 91       	pop	r20
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <main>:
u8 DayCheck;
u8 DayStateCheck;
u8 DayState;

void main()
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62

	/*KPD: Internal pull up for Rows and output for columns*/
	DIO_vidSetPortDir(DIO_PORTA,0b00001111);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	6f e0       	ldi	r22, 0x0F	; 15
    1ed8:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_vidSetPortDir>
	DIO_vidSetPortVal(DIO_PORTA,0xff);
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	6f ef       	ldi	r22, 0xFF	; 255
    1ee0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vidSetPortVal>

	DIO_vidSetPortDir(DIO_PORTB,0);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_vidSetPortDir>
	DIO_vidSetPortVal(DIO_PORTB,0xff);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	6f ef       	ldi	r22, 0xFF	; 255
    1ef0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vidSetPortVal>

	/*LCD PORT Data and Control Directions */
	DIO_vidSetPortDir(LCD_DATA_PORT,0xFF); //PORT Data Direction
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	6f ef       	ldi	r22, 0xFF	; 255
    1ef8:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_vidSetPortDir>
	DIO_vidSetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT); //PORT Control Direction For RS
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	65 e0       	ldi	r22, 0x05	; 5
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT); //PORT Control Direction For E
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_vidSetPinDir>

	/*LCD Init*/
	HLCD_voidInit();
    1f10:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidInit>

	/*Timer*/
	TIMER0_voidInit();
    1f14:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <TIMER0_voidInit>
	TIMER0_u8SetCallBack(&Clock);
    1f18:	8c ef       	ldi	r24, 0xFC	; 252
    1f1a:	98 e1       	ldi	r25, 0x18	; 24
    1f1c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <TIMER0_u8SetCallBack>
	GIE_voidEnable();
    1f20:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GIE_voidEnable>



	 while(1)
	{
		Key= KPD_u8GetPressedKey();
    1f24:	0e 94 87 09 	call	0x130e	; 0x130e <KPD_u8GetPressedKey>
    1f28:	80 93 fe 01 	sts	0x01FE, r24
		NormalClock_ModeDisplay ();
    1f2c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <NormalClock_ModeDisplay>
		if (Key!=0xFF)
    1f30:	80 91 fe 01 	lds	r24, 0x01FE
    1f34:	8f 3f       	cpi	r24, 0xFF	; 255
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <main+0x70>
		{
			Set_Option ();
    1f38:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Set_Option>
		}
		Set_CalenderMode();
    1f3c:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <Set_CalenderMode>
		Set_ClockMode();
    1f40:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <Set_ClockMode>
    1f44:	ef cf       	rjmp	.-34     	; 0x1f24 <main+0x58>

00001f46 <NormalClock_ModeDisplay>:
}



void NormalClock_ModeDisplay (void)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
	Minutes_AutoInc ();
    1f5a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Minutes_AutoInc>
	Hours_AutoInc ();
    1f5e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <Hours_AutoInc>
	DayState_AutoInc ();
    1f62:	0e 94 a0 13 	call	0x2740	; 0x2740 <DayState_AutoInc>
	HLCD_voidSendCommand(LCD_CLEAR);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	HLCD_voidGotoxy(3,0);
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	Hours_Display ();
    1f74:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Hours_Display>
	HLCD_voidSendChar(':');
    1f78:	8a e3       	ldi	r24, 0x3A	; 58
    1f7a:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Minutes_Display ();
    1f7e:	0e 94 0c 13 	call	0x2618	; 0x2618 <Minutes_Display>
	HLCD_voidSendChar(':');
    1f82:	8a e3       	ldi	r24, 0x3A	; 58
    1f84:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Seconds_Display ();
    1f88:	0e 94 28 13 	call	0x2650	; 0x2650 <Seconds_Display>

	DayState_Display ();
    1f8c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <DayState_Display>

	Day_AutoInc();
    1f90:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Day_AutoInc>
	Month_AutoInc();
    1f94:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Month_AutoInc>
	Year_AutoInc();
    1f98:	0e 94 d7 15 	call	0x2bae	; 0x2bae <Year_AutoInc>
	HLCD_voidGotoxy(3,1);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	Day_Display ();
    1fa4:	0e 94 44 13 	call	0x2688	; 0x2688 <Day_Display>
	HLCD_voidSendChar('/');
    1fa8:	8f e2       	ldi	r24, 0x2F	; 47
    1faa:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Month_Display ();
    1fae:	0e 94 60 13 	call	0x26c0	; 0x26c0 <Month_Display>
	HLCD_voidSendChar('/');
    1fb2:	8f e2       	ldi	r24, 0x2F	; 47
    1fb4:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Year_Display ();
    1fb8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Year_Display>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a8 ec       	ldi	r26, 0xC8	; 200
    1fc2:	b2 e4       	ldi	r27, 0x42	; 66
    1fc4:	8b 87       	std	Y+11, r24	; 0x0b
    1fc6:	9c 87       	std	Y+12, r25	; 0x0c
    1fc8:	ad 87       	std	Y+13, r26	; 0x0d
    1fca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a ef       	ldi	r20, 0xFA	; 250
    1fda:	54 e4       	ldi	r21, 0x44	; 68
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8f 83       	std	Y+7, r24	; 0x07
    1fe6:	98 87       	std	Y+8, r25	; 0x08
    1fe8:	a9 87       	std	Y+9, r26	; 0x09
    1fea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <NormalClock_ModeDisplay+0xc8>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	3f c0       	rjmp	.+126    	; 0x208c <NormalClock_ModeDisplay+0x146>
	else if (__tmp > 65535)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	4c f5       	brge	.+82     	; 0x2078 <NormalClock_ModeDisplay+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	6b 85       	ldd	r22, Y+11	; 0x0b
    2028:	7c 85       	ldd	r23, Y+12	; 0x0c
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	9e 85       	ldd	r25, Y+14	; 0x0e
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	0f c0       	rjmp	.+30     	; 0x206e <NormalClock_ModeDisplay+0x128>
    2050:	88 ec       	ldi	r24, 0xC8	; 200
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <NormalClock_ModeDisplay+0x116>
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	69 f7       	brne	.-38     	; 0x2050 <NormalClock_ModeDisplay+0x10a>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <NormalClock_ModeDisplay+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <NormalClock_ModeDisplay+0x152>
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    20a0:	2e 96       	adiw	r28, 0x0e	; 14
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <Set_ClockEnterDisplay>:

void Set_ClockEnterDisplay (void)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	2e 97       	sbiw	r28, 0x0e	; 14
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_CLEAR);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	HLCD_voidSendString("Clock  Set  Mode");
    20cc:	80 e6       	ldi	r24, 0x60	; 96
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
	HLCD_voidGotoxy(0,1);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	HLCD_voidSendString("   Activated");
    20dc:	81 e7       	ldi	r24, 0x71	; 113
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	aa e7       	ldi	r26, 0x7A	; 122
    20ea:	b4 e4       	ldi	r27, 0x44	; 68
    20ec:	8b 87       	std	Y+11, r24	; 0x0b
    20ee:	9c 87       	std	Y+12, r25	; 0x0c
    20f0:	ad 87       	std	Y+13, r26	; 0x0d
    20f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a ef       	ldi	r20, 0xFA	; 250
    2102:	54 e4       	ldi	r21, 0x44	; 68
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8f 83       	std	Y+7, r24	; 0x07
    210e:	98 87       	std	Y+8, r25	; 0x08
    2110:	a9 87       	std	Y+9, r26	; 0x09
    2112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	2c f4       	brge	.+10     	; 0x2136 <Set_ClockEnterDisplay+0x84>
		__ticks = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	3f c0       	rjmp	.+126    	; 0x21b4 <Set_ClockEnterDisplay+0x102>
	else if (__tmp > 65535)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214a:	18 16       	cp	r1, r24
    214c:	4c f5       	brge	.+82     	; 0x21a0 <Set_ClockEnterDisplay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2150:	7c 85       	ldd	r23, Y+12	; 0x0c
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	9e 85       	ldd	r25, Y+14	; 0x0e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e2       	ldi	r20, 0x20	; 32
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <Set_ClockEnterDisplay+0xe4>
    2178:	88 ec       	ldi	r24, 0xC8	; 200
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <Set_ClockEnterDisplay+0xd2>
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	9e 83       	std	Y+6, r25	; 0x06
    2194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	69 f7       	brne	.-38     	; 0x2178 <Set_ClockEnterDisplay+0xc6>
    219e:	14 c0       	rjmp	.+40     	; 0x21c8 <Set_ClockEnterDisplay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	6f 81       	ldd	r22, Y+7	; 0x07
    21a2:	78 85       	ldd	r23, Y+8	; 0x08
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <Set_ClockEnterDisplay+0x10e>
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    21c8:	2e 96       	adiw	r28, 0x0e	; 14
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <Set_CalendarEnterDisplay>:
void Set_CalendarEnterDisplay (void)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	2e 97       	sbiw	r28, 0x0e	; 14
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_CLEAR);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	HLCD_voidSendString(" Date Set Mode");
    21f4:	8e e7       	ldi	r24, 0x7E	; 126
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
	HLCD_voidGotoxy(0,1);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	HLCD_voidSendString("   Activated");
    2204:	81 e7       	ldi	r24, 0x71	; 113
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	aa e7       	ldi	r26, 0x7A	; 122
    2212:	b4 e4       	ldi	r27, 0x44	; 68
    2214:	8b 87       	std	Y+11, r24	; 0x0b
    2216:	9c 87       	std	Y+12, r25	; 0x0c
    2218:	ad 87       	std	Y+13, r26	; 0x0d
    221a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221c:	6b 85       	ldd	r22, Y+11	; 0x0b
    221e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2220:	8d 85       	ldd	r24, Y+13	; 0x0d
    2222:	9e 85       	ldd	r25, Y+14	; 0x0e
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a ef       	ldi	r20, 0xFA	; 250
    222a:	54 e4       	ldi	r21, 0x44	; 68
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8f 83       	std	Y+7, r24	; 0x07
    2236:	98 87       	std	Y+8, r25	; 0x08
    2238:	a9 87       	std	Y+9, r26	; 0x09
    223a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	2c f4       	brge	.+10     	; 0x225e <Set_CalendarEnterDisplay+0x84>
		__ticks = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	3f c0       	rjmp	.+126    	; 0x22dc <Set_CalendarEnterDisplay+0x102>
	else if (__tmp > 65535)
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	4c f5       	brge	.+82     	; 0x22c8 <Set_CalendarEnterDisplay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	51 e4       	ldi	r21, 0x41	; 65
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	0f c0       	rjmp	.+30     	; 0x22be <Set_CalendarEnterDisplay+0xe4>
    22a0:	88 ec       	ldi	r24, 0xC8	; 200
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <Set_CalendarEnterDisplay+0xd2>
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f7       	brne	.-38     	; 0x22a0 <Set_CalendarEnterDisplay+0xc6>
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <Set_CalendarEnterDisplay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ca:	78 85       	ldd	r23, Y+8	; 0x08
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <Set_CalendarEnterDisplay+0x10e>
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    22f0:	2e 96       	adiw	r28, 0x0e	; 14
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <Set_CalenderModeDisplay>:
void Set_CalenderModeDisplay (void)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	2e 97       	sbiw	r28, 0x0e	; 14
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
	Day_AutoInc();
    2316:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Day_AutoInc>
	Month_AutoInc();
    231a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Month_AutoInc>
	Year_AutoInc();
    231e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <Year_AutoInc>
	HLCD_voidSendCommand(LCD_CLEAR);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	HLCD_voidGotoxy(0,0);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	HLCD_voidSendString("Set Date:");
    2330:	8d e8       	ldi	r24, 0x8D	; 141
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
	HLCD_voidGotoxy(0,1);
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	Day_Display ();
    2340:	0e 94 44 13 	call	0x2688	; 0x2688 <Day_Display>
	HLCD_voidSendChar('/');
    2344:	8f e2       	ldi	r24, 0x2F	; 47
    2346:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Month_Display ();
    234a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <Month_Display>
	HLCD_voidSendChar('/');
    234e:	8f e2       	ldi	r24, 0x2F	; 47
    2350:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Year_Display ();
    2354:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <Year_Display>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a8 e4       	ldi	r26, 0x48	; 72
    235e:	b2 e4       	ldi	r27, 0x42	; 66
    2360:	8b 87       	std	Y+11, r24	; 0x0b
    2362:	9c 87       	std	Y+12, r25	; 0x0c
    2364:	ad 87       	std	Y+13, r26	; 0x0d
    2366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6b 85       	ldd	r22, Y+11	; 0x0b
    236a:	7c 85       	ldd	r23, Y+12	; 0x0c
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8f 83       	std	Y+7, r24	; 0x07
    2382:	98 87       	std	Y+8, r25	; 0x08
    2384:	a9 87       	std	Y+9, r26	; 0x09
    2386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <Set_CalenderModeDisplay+0xa8>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <Set_CalenderModeDisplay+0x126>
	else if (__tmp > 65535)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <Set_CalenderModeDisplay+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <Set_CalenderModeDisplay+0x108>
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <Set_CalenderModeDisplay+0xf6>
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <Set_CalenderModeDisplay+0xea>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <Set_CalenderModeDisplay+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6f 81       	ldd	r22, Y+7	; 0x07
    2416:	78 85       	ldd	r23, Y+8	; 0x08
    2418:	89 85       	ldd	r24, Y+9	; 0x09
    241a:	9a 85       	ldd	r25, Y+10	; 0x0a
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <Set_CalenderModeDisplay+0x132>
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    243c:	2e 96       	adiw	r28, 0x0e	; 14
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <Set_ClockModeDisplay>:
void Set_ClockModeDisplay (void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	2e 97       	sbiw	r28, 0x0e	; 14
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_CLEAR);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
	Minutes_AutoInc ();
    2468:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Minutes_AutoInc>
	Hours_AutoInc ();
    246c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <Hours_AutoInc>
	Day_AutoInc();
    2470:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Day_AutoInc>
	 DayState_AutoInc ();
    2474:	0e 94 a0 13 	call	0x2740	; 0x2740 <DayState_AutoInc>
	HLCD_voidGotoxy(0,0);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	HLCD_voidSendString("Set Clock:");
    2480:	87 e9       	ldi	r24, 0x97	; 151
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
	HLCD_voidGotoxy(0,1);
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
	Hours_Display ();
    2490:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Hours_Display>
	HLCD_voidSendChar(':');
    2494:	8a e3       	ldi	r24, 0x3A	; 58
    2496:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Minutes_Display ();
    249a:	0e 94 0c 13 	call	0x2618	; 0x2618 <Minutes_Display>
	HLCD_voidSendChar(':');
    249e:	8a e3       	ldi	r24, 0x3A	; 58
    24a0:	0e 94 cf 0c 	call	0x199e	; 0x199e <HLCD_voidSendChar>
	Seconds_Display ();
    24a4:	0e 94 28 13 	call	0x2650	; 0x2650 <Seconds_Display>

	DayState_Display();
    24a8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <DayState_Display>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a8 e4       	ldi	r26, 0x48	; 72
    24b2:	b2 e4       	ldi	r27, 0x42	; 66
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <Set_ClockModeDisplay+0xb0>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <Set_ClockModeDisplay+0x12e>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <Set_ClockModeDisplay+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <Set_ClockModeDisplay+0x110>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <Set_ClockModeDisplay+0xfe>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <Set_ClockModeDisplay+0xf2>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <Set_ClockModeDisplay+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <Set_ClockModeDisplay+0x13a>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(50);
}
    2590:	2e 96       	adiw	r28, 0x0e	; 14
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <DayState_Display>:


void DayState_Display (void)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
	if (DayState == AM)
    25aa:	80 91 fd 01 	lds	r24, 0x01FD
    25ae:	88 23       	and	r24, r24
    25b0:	29 f4       	brne	.+10     	; 0x25bc <DayState_Display+0x1a>
	{
		HLCD_voidSendString(" AM");
    25b2:	82 ea       	ldi	r24, 0xA2	; 162
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <DayState_Display+0x2a>
	}
	else if (DayState == PM)
    25bc:	80 91 fd 01 	lds	r24, 0x01FD
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	21 f4       	brne	.+8      	; 0x25cc <DayState_Display+0x2a>
	{
		HLCD_voidSendString(" PM");
    25c4:	86 ea       	ldi	r24, 0xA6	; 166
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
	}
	else
	{
		//Do Nothing
	}
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <Hours_Display>:

void Hours_Display (void)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	if (Hours == 0)
    25da:	80 91 dd 01 	lds	r24, 0x01DD
    25de:	88 23       	and	r24, r24
    25e0:	19 f4       	brne	.+6      	; 0x25e8 <Hours_Display+0x16>
	{
		Hours =12;
    25e2:	8c e0       	ldi	r24, 0x0C	; 12
    25e4:	80 93 dd 01 	sts	0x01DD, r24
	}
	if (Hours>=0 && Hours<=9)
    25e8:	80 91 dd 01 	lds	r24, 0x01DD
    25ec:	8a 30       	cpi	r24, 0x0A	; 10
    25ee:	58 f4       	brcc	.+22     	; 0x2606 <Hours_Display+0x34>
	{
		LCD_Send_Num(0);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		LCD_Send_Num(Hours);
    25f8:	80 91 dd 01 	lds	r24, 0x01DD
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <Hours_Display+0x40>
	}
	else
	{
		LCD_Send_Num(Hours);
    2606:	80 91 dd 01 	lds	r24, 0x01DD
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
	}
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <Minutes_Display>:

void Minutes_Display (void)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
	if (Minutes>=0 && Minutes<=9)
    2620:	80 91 00 02 	lds	r24, 0x0200
    2624:	8a 30       	cpi	r24, 0x0A	; 10
    2626:	58 f4       	brcc	.+22     	; 0x263e <Minutes_Display+0x26>
		{
			LCD_Send_Num(0);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
			LCD_Send_Num(Minutes);
    2630:	80 91 00 02 	lds	r24, 0x0200
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    263c:	06 c0       	rjmp	.+12     	; 0x264a <Minutes_Display+0x32>
		}
		else
		{
			LCD_Send_Num(Minutes);
    263e:	80 91 00 02 	lds	r24, 0x0200
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		}
}
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <Seconds_Display>:

void Seconds_Display (void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	if (Seconds>=0 && Seconds<=9)
    2658:	80 91 01 02 	lds	r24, 0x0201
    265c:	8a 30       	cpi	r24, 0x0A	; 10
    265e:	58 f4       	brcc	.+22     	; 0x2676 <Seconds_Display+0x26>
		{
			LCD_Send_Num(0);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
			LCD_Send_Num(Seconds);
    2668:	80 91 01 02 	lds	r24, 0x0201
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <Seconds_Display+0x32>
		}
		else
		{
			LCD_Send_Num(Seconds);
    2676:	80 91 01 02 	lds	r24, 0x0201
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		}
}
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <Day_Display>:

void Day_Display (void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	if (Day>=0 && Day<=9)
    2690:	80 91 de 01 	lds	r24, 0x01DE
    2694:	8a 30       	cpi	r24, 0x0A	; 10
    2696:	58 f4       	brcc	.+22     	; 0x26ae <Day_Display+0x26>
		{
			LCD_Send_Num(0);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
			LCD_Send_Num(Day);
    26a0:	80 91 de 01 	lds	r24, 0x01DE
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <Day_Display+0x32>
		}
		else
		{
			LCD_Send_Num(Day);
    26ae:	80 91 de 01 	lds	r24, 0x01DE
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		}
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <Month_Display>:

void Month_Display (void)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
	if (Month>=0 && Month<=9)
    26c8:	80 91 df 01 	lds	r24, 0x01DF
    26cc:	8a 30       	cpi	r24, 0x0A	; 10
    26ce:	58 f4       	brcc	.+22     	; 0x26e6 <Month_Display+0x26>
		{
			LCD_Send_Num(0);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
			LCD_Send_Num(Month);
    26d8:	80 91 df 01 	lds	r24, 0x01DF
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <Month_Display+0x32>
		}
		else
		{
			LCD_Send_Num(Month);
    26e6:	80 91 df 01 	lds	r24, 0x01DF
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		}
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <Year_Display>:

void Year_Display (void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Num(2);
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
	LCD_Send_Num(0);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>

	if (Year>=0 && Year<=9)
    2710:	80 91 e0 01 	lds	r24, 0x01E0
    2714:	8a 30       	cpi	r24, 0x0A	; 10
    2716:	58 f4       	brcc	.+22     	; 0x272e <Year_Display+0x36>
		{
			LCD_Send_Num(0);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
			LCD_Send_Num(Year);
    2720:	80 91 e0 01 	lds	r24, 0x01E0
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
    272c:	06 c0       	rjmp	.+12     	; 0x273a <Year_Display+0x42>
		}
	else
		{
			LCD_Send_Num(Year);
    272e:	80 91 e0 01 	lds	r24, 0x01E0
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_Send_Num>
		}
}
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <DayState_AutoInc>:

void DayState_AutoInc (void)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	6c 97       	sbiw	r28, 0x1c	; 28
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
	if(Hours ==12 && Minutes == 0 && Seconds==0 && DayStateCheck==0 && DayState == AM)
    2754:	80 91 dd 01 	lds	r24, 0x01DD
    2758:	8c 30       	cpi	r24, 0x0C	; 12
    275a:	09 f0       	breq	.+2      	; 0x275e <DayState_AutoInc+0x1e>
    275c:	8c c0       	rjmp	.+280    	; 0x2876 <DayState_AutoInc+0x136>
    275e:	80 91 00 02 	lds	r24, 0x0200
    2762:	88 23       	and	r24, r24
    2764:	09 f0       	breq	.+2      	; 0x2768 <DayState_AutoInc+0x28>
    2766:	87 c0       	rjmp	.+270    	; 0x2876 <DayState_AutoInc+0x136>
    2768:	80 91 01 02 	lds	r24, 0x0201
    276c:	88 23       	and	r24, r24
    276e:	09 f0       	breq	.+2      	; 0x2772 <DayState_AutoInc+0x32>
    2770:	82 c0       	rjmp	.+260    	; 0x2876 <DayState_AutoInc+0x136>
    2772:	80 91 ff 01 	lds	r24, 0x01FF
    2776:	88 23       	and	r24, r24
    2778:	09 f0       	breq	.+2      	; 0x277c <DayState_AutoInc+0x3c>
    277a:	7d c0       	rjmp	.+250    	; 0x2876 <DayState_AutoInc+0x136>
    277c:	80 91 fd 01 	lds	r24, 0x01FD
    2780:	88 23       	and	r24, r24
    2782:	09 f0       	breq	.+2      	; 0x2786 <DayState_AutoInc+0x46>
    2784:	78 c0       	rjmp	.+240    	; 0x2876 <DayState_AutoInc+0x136>
	{
		DayState=PM;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 fd 01 	sts	0x01FD, r24
		DayStateCheck=1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	80 93 ff 01 	sts	0x01FF, r24
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e4       	ldi	r27, 0x40	; 64
    279a:	89 8f       	std	Y+25, r24	; 0x19
    279c:	9a 8f       	std	Y+26, r25	; 0x1a
    279e:	ab 8f       	std	Y+27, r26	; 0x1b
    27a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	69 8d       	ldd	r22, Y+25	; 0x19
    27a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a ef       	ldi	r20, 0xFA	; 250
    27b0:	54 e4       	ldi	r21, 0x44	; 68
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8d 8b       	std	Y+21, r24	; 0x15
    27bc:	9e 8b       	std	Y+22, r25	; 0x16
    27be:	af 8b       	std	Y+23, r26	; 0x17
    27c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27c2:	6d 89       	ldd	r22, Y+21	; 0x15
    27c4:	7e 89       	ldd	r23, Y+22	; 0x16
    27c6:	8f 89       	ldd	r24, Y+23	; 0x17
    27c8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <DayState_AutoInc+0xa4>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <DayState_AutoInc+0x122>
	else if (__tmp > 65535)
    27e4:	6d 89       	ldd	r22, Y+21	; 0x15
    27e6:	7e 89       	ldd	r23, Y+22	; 0x16
    27e8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ea:	98 8d       	ldd	r25, Y+24	; 0x18
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	57 e4       	ldi	r21, 0x47	; 71
    27f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <DayState_AutoInc+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	69 8d       	ldd	r22, Y+25	; 0x19
    27fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9c 8b       	std	Y+20, r25	; 0x14
    2822:	8b 8b       	std	Y+19, r24	; 0x13
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <DayState_AutoInc+0x104>
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9a 8b       	std	Y+18, r25	; 0x12
    282c:	89 8b       	std	Y+17, r24	; 0x11
    282e:	89 89       	ldd	r24, Y+17	; 0x11
    2830:	9a 89       	ldd	r25, Y+18	; 0x12
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <DayState_AutoInc+0xf2>
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9c 8b       	std	Y+20, r25	; 0x14
    2842:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <DayState_AutoInc+0xe6>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <DayState_AutoInc+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	98 8b       	std	Y+16, r25	; 0x10
    2868:	8f 87       	std	Y+15, r24	; 0x0f
    286a:	8f 85       	ldd	r24, Y+15	; 0x0f
    286c:	98 89       	ldd	r25, Y+16	; 0x10
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <DayState_AutoInc+0x12e>
    2872:	98 8b       	std	Y+16, r25	; 0x10
    2874:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
	}
	 if (Hours ==12 && Minutes == 0 && Seconds==0 && DayStateCheck==0 && DayState == PM)
    2876:	80 91 dd 01 	lds	r24, 0x01DD
    287a:	8c 30       	cpi	r24, 0x0C	; 12
    287c:	09 f0       	breq	.+2      	; 0x2880 <DayState_AutoInc+0x140>
    287e:	8b c0       	rjmp	.+278    	; 0x2996 <DayState_AutoInc+0x256>
    2880:	80 91 00 02 	lds	r24, 0x0200
    2884:	88 23       	and	r24, r24
    2886:	09 f0       	breq	.+2      	; 0x288a <DayState_AutoInc+0x14a>
    2888:	86 c0       	rjmp	.+268    	; 0x2996 <DayState_AutoInc+0x256>
    288a:	80 91 01 02 	lds	r24, 0x0201
    288e:	88 23       	and	r24, r24
    2890:	09 f0       	breq	.+2      	; 0x2894 <DayState_AutoInc+0x154>
    2892:	81 c0       	rjmp	.+258    	; 0x2996 <DayState_AutoInc+0x256>
    2894:	80 91 ff 01 	lds	r24, 0x01FF
    2898:	88 23       	and	r24, r24
    289a:	09 f0       	breq	.+2      	; 0x289e <DayState_AutoInc+0x15e>
    289c:	7c c0       	rjmp	.+248    	; 0x2996 <DayState_AutoInc+0x256>
    289e:	80 91 fd 01 	lds	r24, 0x01FD
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <DayState_AutoInc+0x168>
    28a6:	77 c0       	rjmp	.+238    	; 0x2996 <DayState_AutoInc+0x256>
	{
		DayState=AM;
    28a8:	10 92 fd 01 	sts	0x01FD, r1
		DayStateCheck=1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	80 93 ff 01 	sts	0x01FF, r24
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e4       	ldi	r27, 0x40	; 64
    28ba:	8b 87       	std	Y+11, r24	; 0x0b
    28bc:	9c 87       	std	Y+12, r25	; 0x0c
    28be:	ad 87       	std	Y+13, r26	; 0x0d
    28c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a ef       	ldi	r20, 0xFA	; 250
    28d0:	54 e4       	ldi	r21, 0x44	; 68
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8f 83       	std	Y+7, r24	; 0x07
    28dc:	98 87       	std	Y+8, r25	; 0x08
    28de:	a9 87       	std	Y+9, r26	; 0x09
    28e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <DayState_AutoInc+0x1c4>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <DayState_AutoInc+0x242>
	else if (__tmp > 65535)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <DayState_AutoInc+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <DayState_AutoInc+0x224>
    2946:	88 ec       	ldi	r24, 0xC8	; 200
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <DayState_AutoInc+0x212>
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <DayState_AutoInc+0x206>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <DayState_AutoInc+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <DayState_AutoInc+0x24e>
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    2996:	6c 96       	adiw	r28, 0x1c	; 28
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <Day_AutoInc>:

void Day_AutoInc (void)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	2e 97       	sbiw	r28, 0x0e	; 14
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61

	if(Hours ==12 && Minutes == 0 && Seconds==0 && DayCheck==0 && DayState == AM)
    29bc:	80 91 dd 01 	lds	r24, 0x01DD
    29c0:	8c 30       	cpi	r24, 0x0C	; 12
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <Day_AutoInc+0x1e>
    29c4:	8e c0       	rjmp	.+284    	; 0x2ae2 <Day_AutoInc+0x13a>
    29c6:	80 91 00 02 	lds	r24, 0x0200
    29ca:	88 23       	and	r24, r24
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <Day_AutoInc+0x28>
    29ce:	89 c0       	rjmp	.+274    	; 0x2ae2 <Day_AutoInc+0x13a>
    29d0:	80 91 01 02 	lds	r24, 0x0201
    29d4:	88 23       	and	r24, r24
    29d6:	09 f0       	breq	.+2      	; 0x29da <Day_AutoInc+0x32>
    29d8:	84 c0       	rjmp	.+264    	; 0x2ae2 <Day_AutoInc+0x13a>
    29da:	80 91 fc 01 	lds	r24, 0x01FC
    29de:	88 23       	and	r24, r24
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <Day_AutoInc+0x3c>
    29e2:	7f c0       	rjmp	.+254    	; 0x2ae2 <Day_AutoInc+0x13a>
    29e4:	80 91 fd 01 	lds	r24, 0x01FD
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <Day_AutoInc+0x46>
    29ec:	7a c0       	rjmp	.+244    	; 0x2ae2 <Day_AutoInc+0x13a>
	{
		Day+=1;
    29ee:	80 91 de 01 	lds	r24, 0x01DE
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	80 93 de 01 	sts	0x01DE, r24
		DayCheck=1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 fc 01 	sts	0x01FC, r24
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e4       	ldi	r27, 0x40	; 64
    2a06:	8b 87       	std	Y+11, r24	; 0x0b
    2a08:	9c 87       	std	Y+12, r25	; 0x0c
    2a0a:	ad 87       	std	Y+13, r26	; 0x0d
    2a0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8f 83       	std	Y+7, r24	; 0x07
    2a28:	98 87       	std	Y+8, r25	; 0x08
    2a2a:	a9 87       	std	Y+9, r26	; 0x09
    2a2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a30:	78 85       	ldd	r23, Y+8	; 0x08
    2a32:	89 85       	ldd	r24, Y+9	; 0x09
    2a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <Day_AutoInc+0xa8>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <Day_AutoInc+0x126>
	else if (__tmp > 65535)
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <Day_AutoInc+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <Day_AutoInc+0x108>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <Day_AutoInc+0xf6>
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <Day_AutoInc+0xea>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <Day_AutoInc+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <Day_AutoInc+0x132>
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do Nothing
	}

}
    2ae2:	2e 96       	adiw	r28, 0x0e	; 14
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <Month_AutoInc>:
void Month_AutoInc (void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	if((Day==32) && (Month == 1 || Month == 3 || Month ==5 || Month ==7 || Month ==8 || Month ==10|| Month == 12))
    2afc:	80 91 de 01 	lds	r24, 0x01DE
    2b00:	80 32       	cpi	r24, 0x20	; 32
    2b02:	29 f5       	brne	.+74     	; 0x2b4e <Month_AutoInc+0x5a>
    2b04:	80 91 df 01 	lds	r24, 0x01DF
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	c1 f0       	breq	.+48     	; 0x2b3c <Month_AutoInc+0x48>
    2b0c:	80 91 df 01 	lds	r24, 0x01DF
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	a1 f0       	breq	.+40     	; 0x2b3c <Month_AutoInc+0x48>
    2b14:	80 91 df 01 	lds	r24, 0x01DF
    2b18:	85 30       	cpi	r24, 0x05	; 5
    2b1a:	81 f0       	breq	.+32     	; 0x2b3c <Month_AutoInc+0x48>
    2b1c:	80 91 df 01 	lds	r24, 0x01DF
    2b20:	87 30       	cpi	r24, 0x07	; 7
    2b22:	61 f0       	breq	.+24     	; 0x2b3c <Month_AutoInc+0x48>
    2b24:	80 91 df 01 	lds	r24, 0x01DF
    2b28:	88 30       	cpi	r24, 0x08	; 8
    2b2a:	41 f0       	breq	.+16     	; 0x2b3c <Month_AutoInc+0x48>
    2b2c:	80 91 df 01 	lds	r24, 0x01DF
    2b30:	8a 30       	cpi	r24, 0x0A	; 10
    2b32:	21 f0       	breq	.+8      	; 0x2b3c <Month_AutoInc+0x48>
    2b34:	80 91 df 01 	lds	r24, 0x01DF
    2b38:	8c 30       	cpi	r24, 0x0C	; 12
    2b3a:	49 f4       	brne	.+18     	; 0x2b4e <Month_AutoInc+0x5a>
	{

		Day=1;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	80 93 de 01 	sts	0x01DE, r24
		Month+=1;
    2b42:	80 91 df 01 	lds	r24, 0x01DF
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 df 01 	sts	0x01DF, r24
    2b4c:	2d c0       	rjmp	.+90     	; 0x2ba8 <Month_AutoInc+0xb4>
	}
	else if((Day==31 )&& (Month ==4  || Month == 6 || Month ==9 || Month ==11))
    2b4e:	80 91 de 01 	lds	r24, 0x01DE
    2b52:	8f 31       	cpi	r24, 0x1F	; 31
    2b54:	c9 f4       	brne	.+50     	; 0x2b88 <Month_AutoInc+0x94>
    2b56:	80 91 df 01 	lds	r24, 0x01DF
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <Month_AutoInc+0x82>
    2b5e:	80 91 df 01 	lds	r24, 0x01DF
    2b62:	86 30       	cpi	r24, 0x06	; 6
    2b64:	41 f0       	breq	.+16     	; 0x2b76 <Month_AutoInc+0x82>
    2b66:	80 91 df 01 	lds	r24, 0x01DF
    2b6a:	89 30       	cpi	r24, 0x09	; 9
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <Month_AutoInc+0x82>
    2b6e:	80 91 df 01 	lds	r24, 0x01DF
    2b72:	8b 30       	cpi	r24, 0x0B	; 11
    2b74:	49 f4       	brne	.+18     	; 0x2b88 <Month_AutoInc+0x94>
	{

		Day=1;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	80 93 de 01 	sts	0x01DE, r24
		Month+=1;
    2b7c:	80 91 df 01 	lds	r24, 0x01DF
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	80 93 df 01 	sts	0x01DF, r24
    2b86:	10 c0       	rjmp	.+32     	; 0x2ba8 <Month_AutoInc+0xb4>
	}
	else if(Day==29 && Month ==2)
    2b88:	80 91 de 01 	lds	r24, 0x01DE
    2b8c:	8d 31       	cpi	r24, 0x1D	; 29
    2b8e:	61 f4       	brne	.+24     	; 0x2ba8 <Month_AutoInc+0xb4>
    2b90:	80 91 df 01 	lds	r24, 0x01DF
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	41 f4       	brne	.+16     	; 0x2ba8 <Month_AutoInc+0xb4>
	{
		Month+=1;
    2b98:	80 91 df 01 	lds	r24, 0x01DF
    2b9c:	8f 5f       	subi	r24, 0xFF	; 255
    2b9e:	80 93 df 01 	sts	0x01DF, r24
		Day=1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	80 93 de 01 	sts	0x01DE, r24
	}
	else
	{
		//Do Nothing
	}
}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <Year_AutoInc>:

void Year_AutoInc (void)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	if(Month>12 )
    2bb6:	80 91 df 01 	lds	r24, 0x01DF
    2bba:	8d 30       	cpi	r24, 0x0D	; 13
    2bbc:	40 f0       	brcs	.+16     	; 0x2bce <Year_AutoInc+0x20>
	{
		Year+=1;
    2bbe:	80 91 e0 01 	lds	r24, 0x01E0
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	80 93 e0 01 	sts	0x01E0, r24
		Month=1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 93 df 01 	sts	0x01DF, r24
	}
	else
	{
		//Do Nothing
	}
}
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <Minutes_AutoInc>:


void Minutes_AutoInc (void)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
	if(Seconds>=60)
    2bdc:	80 91 01 02 	lds	r24, 0x0201
    2be0:	8c 33       	cpi	r24, 0x3C	; 60
    2be2:	38 f0       	brcs	.+14     	; 0x2bf2 <Minutes_AutoInc+0x1e>
	{
		Seconds=0;
    2be4:	10 92 01 02 	sts	0x0201, r1
		Minutes+=1;
    2be8:	80 91 00 02 	lds	r24, 0x0200
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	80 93 00 02 	sts	0x0200, r24
	}
	else
	{
		//Do Nothing
	}
}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <Hours_AutoInc>:

void Hours_AutoInc (void)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	if(Minutes>=60)
    2c00:	80 91 00 02 	lds	r24, 0x0200
    2c04:	8c 33       	cpi	r24, 0x3C	; 60
    2c06:	38 f0       	brcs	.+14     	; 0x2c16 <Hours_AutoInc+0x1e>
	{
		Minutes=0;
    2c08:	10 92 00 02 	sts	0x0200, r1
		 Hours+=1;
    2c0c:	80 91 dd 01 	lds	r24, 0x01DD
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	80 93 dd 01 	sts	0x01DD, r24
	}

	if (Hours>12)
    2c16:	80 91 dd 01 	lds	r24, 0x01DD
    2c1a:	8d 30       	cpi	r24, 0x0D	; 13
    2c1c:	18 f0       	brcs	.+6      	; 0x2c24 <Hours_AutoInc+0x2c>
	{
		Hours=1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	80 93 dd 01 	sts	0x01DD, r24
	}
	else
	{
		//Do Nothing
	}
}
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <Set_Option>:




void Set_Option (void)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <Set_Option+0x6>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
	switch(Key)
    2c34:	80 91 fe 01 	lds	r24, 0x01FE
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	3a 83       	std	Y+2, r19	; 0x02
    2c3e:	29 83       	std	Y+1, r18	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	85 33       	cpi	r24, 0x35	; 53
    2c46:	91 05       	cpc	r25, r1
    2c48:	d1 f1       	breq	.+116    	; 0x2cbe <Set_Option+0x94>
    2c4a:	29 81       	ldd	r18, Y+1	; 0x01
    2c4c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c4e:	26 33       	cpi	r18, 0x36	; 54
    2c50:	31 05       	cpc	r19, r1
    2c52:	84 f4       	brge	.+32     	; 0x2c74 <Set_Option+0x4a>
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	81 33       	cpi	r24, 0x31	; 49
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	b1 f0       	breq	.+44     	; 0x2c8a <Set_Option+0x60>
    2c5e:	29 81       	ldd	r18, Y+1	; 0x01
    2c60:	3a 81       	ldd	r19, Y+2	; 0x02
    2c62:	22 33       	cpi	r18, 0x32	; 50
    2c64:	31 05       	cpc	r19, r1
    2c66:	f9 f0       	breq	.+62     	; 0x2ca6 <Set_Option+0x7c>
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	8b 32       	cpi	r24, 0x2B	; 43
    2c6e:	91 05       	cpc	r25, r1
    2c70:	99 f0       	breq	.+38     	; 0x2c98 <Set_Option+0x6e>
    2c72:	3d c0       	rjmp	.+122    	; 0x2cee <Set_Option+0xc4>
    2c74:	29 81       	ldd	r18, Y+1	; 0x01
    2c76:	3a 81       	ldd	r19, Y+2	; 0x02
    2c78:	27 33       	cpi	r18, 0x37	; 55
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	61 f1       	breq	.+88     	; 0x2cd6 <Set_Option+0xac>
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	88 33       	cpi	r24, 0x38	; 56
    2c84:	91 05       	cpc	r25, r1
    2c86:	59 f1       	breq	.+86     	; 0x2cde <Set_Option+0xb4>
    2c88:	32 c0       	rjmp	.+100    	; 0x2cee <Set_Option+0xc4>
	{
	case '1':
				Option=SET_CLOCK;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	80 93 fa 01 	sts	0x01FA, r24
				Entery=CHECKED ;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	80 93 fb 01 	sts	0x01FB, r24
    2c96:	2b c0       	rjmp	.+86     	; 0x2cee <Set_Option+0xc4>
				break;

	case '+':	Option=SET_CALENDER;
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	80 93 fa 01 	sts	0x01FA, r24
				Entery=CHECKED ;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	80 93 fb 01 	sts	0x01FB, r24
    2ca4:	24 c0       	rjmp	.+72     	; 0x2cee <Set_Option+0xc4>
				break;

	case '2':
				if (Option==SET_CLOCK || Option==SET_CALENDER)
    2ca6:	80 91 fa 01 	lds	r24, 0x01FA
    2caa:	81 30       	cpi	r24, 0x01	; 1
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <Set_Option+0x8c>
    2cae:	80 91 fa 01 	lds	r24, 0x01FA
    2cb2:	82 30       	cpi	r24, 0x02	; 2
    2cb4:	e1 f4       	brne	.+56     	; 0x2cee <Set_Option+0xc4>
				{
					Mode = INCREMENT;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	80 93 f9 01 	sts	0x01F9, r24
    2cbc:	18 c0       	rjmp	.+48     	; 0x2cee <Set_Option+0xc4>
				}
				break;

	case '5':
				if (Option==SET_CLOCK || Option==SET_CALENDER)
    2cbe:	80 91 fa 01 	lds	r24, 0x01FA
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	21 f0       	breq	.+8      	; 0x2cce <Set_Option+0xa4>
    2cc6:	80 91 fa 01 	lds	r24, 0x01FA
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	81 f4       	brne	.+32     	; 0x2cee <Set_Option+0xc4>
				{
					Mode = DECREMENT;
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	80 93 f9 01 	sts	0x01F9, r24
    2cd4:	0c c0       	rjmp	.+24     	; 0x2cee <Set_Option+0xc4>
				}
				break;

	case '7':
			Choose= OUT ;
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	80 93 f7 01 	sts	0x01F7, r24
    2cdc:	08 c0       	rjmp	.+16     	; 0x2cee <Set_Option+0xc4>
			break;

	case '8':
			Chose= ENTER ;
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	80 93 f6 01 	sts	0x01F6, r24
			flag++;
    2ce4:	80 91 f8 01 	lds	r24, 0x01F8
    2ce8:	8f 5f       	subi	r24, 0xFF	; 255
    2cea:	80 93 f8 01 	sts	0x01F8, r24
			break;

	}
}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <Set_CalenderMode>:
void Set_CalenderMode(void)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	2e 97       	sbiw	r28, 0x0e	; 14
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	bb c0       	rjmp	.+374    	; 0x2e84 <Set_CalenderMode+0x18c>
	while (Option==SET_CALENDER)
	{
		if (Entery==CHECKED)
    2d0e:	80 91 fb 01 	lds	r24, 0x01FB
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	21 f4       	brne	.+8      	; 0x2d1e <Set_CalenderMode+0x26>
		{
			Set_CalendarEnterDisplay ();
    2d16:	0e 94 ed 10 	call	0x21da	; 0x21da <Set_CalendarEnterDisplay>
			Entery=0;
    2d1a:	10 92 fb 01 	sts	0x01FB, r1
		}
		 Set_CalenderModeDisplay ();
    2d1e:	0e 94 81 11 	call	0x2302	; 0x2302 <Set_CalenderModeDisplay>
		 Key= KPD_u8GetPressedKey();
    2d22:	0e 94 87 09 	call	0x130e	; 0x130e <KPD_u8GetPressedKey>
    2d26:	80 93 fe 01 	sts	0x01FE, r24

		 if (Key!=0xFF)
    2d2a:	80 91 fe 01 	lds	r24, 0x01FE
    2d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d30:	11 f0       	breq	.+4      	; 0x2d36 <Set_CalenderMode+0x3e>
		{
			Set_Option ();
    2d32:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Set_Option>
		}

		 if (flag == 0)
    2d36:	80 91 f8 01 	lds	r24, 0x01F8
    2d3a:	88 23       	and	r24, r24
    2d3c:	19 f4       	brne	.+6      	; 0x2d44 <Set_CalenderMode+0x4c>
		{
			 Set_ClockSystem (DAY);
    2d3e:	84 e0       	ldi	r24, 0x04	; 4
    2d40:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
		}
		if (flag == 2)
    2d44:	80 91 f8 01 	lds	r24, 0x01F8
    2d48:	82 30       	cpi	r24, 0x02	; 2
    2d4a:	19 f4       	brne	.+6      	; 0x2d52 <Set_CalenderMode+0x5a>
		{
			Set_ClockSystem (YRS);
    2d4c:	86 e0       	ldi	r24, 0x06	; 6
    2d4e:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
		}
		if (flag == 1)
    2d52:	80 91 f8 01 	lds	r24, 0x01F8
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	19 f4       	brne	.+6      	; 0x2d60 <Set_CalenderMode+0x68>
		{
			 Set_ClockSystem (MON);
    2d5a:	85 e0       	ldi	r24, 0x05	; 5
    2d5c:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
		}
		if (Choose == OUT)
    2d60:	80 91 f7 01 	lds	r24, 0x01F7
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <Set_CalenderMode+0x72>
    2d68:	8d c0       	rjmp	.+282    	; 0x2e84 <Set_CalenderMode+0x18c>
		{
			DayStateCheck=0;
    2d6a:	10 92 ff 01 	sts	0x01FF, r1
			DayCheck=0;
    2d6e:	10 92 fc 01 	sts	0x01FC, r1
			Choose=0;
    2d72:	10 92 f7 01 	sts	0x01F7, r1
			Chose=0;
    2d76:	10 92 f6 01 	sts	0x01F6, r1
			flag=0;
    2d7a:	10 92 f8 01 	sts	0x01F8, r1
			HLCD_voidSendCommand(LCD_CLEAR);
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
			HLCD_voidSendString("    Date Set");
    2d84:	8a ea       	ldi	r24, 0xAA	; 170
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
			HLCD_voidGotoxy(0,1);
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
			HLCD_voidSendString("  Successfully ");
    2d94:	87 eb       	ldi	r24, 0xB7	; 183
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a6 e9       	ldi	r26, 0x96	; 150
    2da2:	b4 e4       	ldi	r27, 0x44	; 68
    2da4:	8b 87       	std	Y+11, r24	; 0x0b
    2da6:	9c 87       	std	Y+12, r25	; 0x0c
    2da8:	ad 87       	std	Y+13, r26	; 0x0d
    2daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a ef       	ldi	r20, 0xFA	; 250
    2dba:	54 e4       	ldi	r21, 0x44	; 68
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8f 83       	std	Y+7, r24	; 0x07
    2dc6:	98 87       	std	Y+8, r25	; 0x08
    2dc8:	a9 87       	std	Y+9, r26	; 0x09
    2dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <Set_CalenderMode+0xf6>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <Set_CalenderMode+0x174>
	else if (__tmp > 65535)
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <Set_CalenderMode+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <Set_CalenderMode+0x156>
    2e30:	88 ec       	ldi	r24, 0xC8	; 200
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <Set_CalenderMode+0x144>
    2e40:	9c 83       	std	Y+4, r25	; 0x04
    2e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e50:	9e 81       	ldd	r25, Y+6	; 0x06
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <Set_CalenderMode+0x138>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <Set_CalenderMode+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <Set_CalenderMode+0x180>
    2e7c:	9a 83       	std	Y+2, r25	; 0x02
    2e7e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1200);
			Option=NORMAL_MODE;
    2e80:	10 92 fa 01 	sts	0x01FA, r1

	}
}
void Set_CalenderMode(void)
{
	while (Option==SET_CALENDER)
    2e84:	80 91 fa 01 	lds	r24, 0x01FA
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <Set_CalenderMode+0x196>
    2e8c:	40 cf       	rjmp	.-384    	; 0x2d0e <Set_CalenderMode+0x16>
			HLCD_voidSendString("  Successfully ");
			_delay_ms(1200);
			Option=NORMAL_MODE;
		}
	}
}
    2e8e:	2e 96       	adiw	r28, 0x0e	; 14
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <Set_ClockMode>:
void Set_ClockMode(void)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	2e 97       	sbiw	r28, 0x0e	; 14
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	c2 c0       	rjmp	.+388    	; 0x303a <Set_ClockMode+0x19a>
	while (Option==SET_CLOCK)
			{
				if (Entery==CHECKED)
    2eb6:	80 91 fb 01 	lds	r24, 0x01FB
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <Set_ClockMode+0x26>
				{
					Set_ClockEnterDisplay ();
    2ebe:	0e 94 59 10 	call	0x20b2	; 0x20b2 <Set_ClockEnterDisplay>
					Entery=0;
    2ec2:	10 92 fb 01 	sts	0x01FB, r1
				}

				Set_ClockModeDisplay ();
    2ec6:	0e 94 27 12 	call	0x244e	; 0x244e <Set_ClockModeDisplay>

				Key= KPD_u8GetPressedKey();
    2eca:	0e 94 87 09 	call	0x130e	; 0x130e <KPD_u8GetPressedKey>
    2ece:	80 93 fe 01 	sts	0x01FE, r24

				if (Key!=0xFF)
    2ed2:	80 91 fe 01 	lds	r24, 0x01FE
    2ed6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <Set_ClockMode+0x3e>
				{
					Set_Option ();
    2eda:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Set_Option>
				}

				if (flag ==0)
    2ede:	80 91 f8 01 	lds	r24, 0x01F8
    2ee2:	88 23       	and	r24, r24
    2ee4:	19 f4       	brne	.+6      	; 0x2eec <Set_ClockMode+0x4c>
				{
					Set_ClockSystem (HRS);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
				}
				if (flag == 2)
    2eec:	80 91 f8 01 	lds	r24, 0x01F8
    2ef0:	82 30       	cpi	r24, 0x02	; 2
    2ef2:	19 f4       	brne	.+6      	; 0x2efa <Set_ClockMode+0x5a>
				{
					Set_ClockSystem (SECS);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
				}
				if (flag == 1)
    2efa:	80 91 f8 01 	lds	r24, 0x01F8
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <Set_ClockMode+0x68>
				{
					Set_ClockSystem (MINS);
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
				}
				if (flag == 3)
    2f08:	80 91 f8 01 	lds	r24, 0x01F8
    2f0c:	83 30       	cpi	r24, 0x03	; 3
    2f0e:	19 f4       	brne	.+6      	; 0x2f16 <Set_ClockMode+0x76>
				{
					Set_ClockSystem (DAYSTATE);
    2f10:	87 e0       	ldi	r24, 0x07	; 7
    2f12:	0e 94 2b 18 	call	0x3056	; 0x3056 <Set_ClockSystem>
				}

				if (Choose == OUT)
    2f16:	80 91 f7 01 	lds	r24, 0x01F7
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <Set_ClockMode+0x80>
    2f1e:	8d c0       	rjmp	.+282    	; 0x303a <Set_ClockMode+0x19a>
				{
					DayStateCheck=0;
    2f20:	10 92 ff 01 	sts	0x01FF, r1
					DayCheck=0;
    2f24:	10 92 fc 01 	sts	0x01FC, r1
					Choose=0;
    2f28:	10 92 f7 01 	sts	0x01F7, r1
					Chose=0;
    2f2c:	10 92 f6 01 	sts	0x01F6, r1
					flag=0;
    2f30:	10 92 f8 01 	sts	0x01F8, r1
					HLCD_voidSendCommand(LCD_CLEAR);
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	0e 94 36 0c 	call	0x186c	; 0x186c <HLCD_voidSendCommand>
					HLCD_voidSendString("   Clock  Set");
    2f3a:	87 ec       	ldi	r24, 0xC7	; 199
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
					HLCD_voidGotoxy(0,1);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <HLCD_voidGotoxy>
					HLCD_voidSendString("  Successfully ");
    2f4a:	87 eb       	ldi	r24, 0xB7	; 183
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <HLCD_voidSendString>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a6 e9       	ldi	r26, 0x96	; 150
    2f58:	b4 e4       	ldi	r27, 0x44	; 68
    2f5a:	8b 87       	std	Y+11, r24	; 0x0b
    2f5c:	9c 87       	std	Y+12, r25	; 0x0c
    2f5e:	ad 87       	std	Y+13, r26	; 0x0d
    2f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8f 83       	std	Y+7, r24	; 0x07
    2f7c:	98 87       	std	Y+8, r25	; 0x08
    2f7e:	a9 87       	std	Y+9, r26	; 0x09
    2f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <Set_ClockMode+0x104>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <Set_ClockMode+0x182>
	else if (__tmp > 65535)
    2fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa6:	78 85       	ldd	r23, Y+8	; 0x08
    2fa8:	89 85       	ldd	r24, Y+9	; 0x09
    2faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <Set_ClockMode+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <Set_ClockMode+0x164>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <Set_ClockMode+0x152>
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <Set_ClockMode+0x146>
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <Set_ClockMode+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6f 81       	ldd	r22, Y+7	; 0x07
    3010:	78 85       	ldd	r23, Y+8	; 0x08
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	9a 81       	ldd	r25, Y+2	; 0x02
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <Set_ClockMode+0x18e>
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1200);
					Option=NORMAL_MODE;
    3036:	10 92 fa 01 	sts	0x01FA, r1
		}
	}
}
void Set_ClockMode(void)
{
	while (Option==SET_CLOCK)
    303a:	80 91 fa 01 	lds	r24, 0x01FA
    303e:	81 30       	cpi	r24, 0x01	; 1
    3040:	09 f4       	brne	.+2      	; 0x3044 <Set_ClockMode+0x1a4>
    3042:	39 cf       	rjmp	.-398    	; 0x2eb6 <Set_ClockMode+0x16>
					HLCD_voidSendString("  Successfully ");
					_delay_ms(1200);
					Option=NORMAL_MODE;
				}
}
}
    3044:	2e 96       	adiw	r28, 0x0e	; 14
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <Set_ClockSystem>:

void Set_ClockSystem (u8 Choice)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	0f 92       	push	r0
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	89 83       	std	Y+1, r24	; 0x01
	if (Choice == HRS)
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	f1 f4       	brne	.+60     	; 0x30a4 <Set_ClockSystem+0x4e>
	{

		if (Mode==INCREMENT)
    3068:	80 91 f9 01 	lds	r24, 0x01F9
    306c:	81 30       	cpi	r24, 0x01	; 1
    306e:	59 f4       	brne	.+22     	; 0x3086 <Set_ClockSystem+0x30>
			{
			if(Hours>=0 && Hours<=12)
    3070:	80 91 dd 01 	lds	r24, 0x01DD
    3074:	8d 30       	cpi	r24, 0x0D	; 13
    3076:	38 f4       	brcc	.+14     	; 0x3086 <Set_ClockSystem+0x30>
			{
				Hours++;
    3078:	80 91 dd 01 	lds	r24, 0x01DD
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	80 93 dd 01 	sts	0x01DD, r24
				Mode =0;
    3082:	10 92 f9 01 	sts	0x01F9, r1
			}

			}
			if (Mode==DECREMENT)
    3086:	80 91 f9 01 	lds	r24, 0x01F9
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	59 f4       	brne	.+22     	; 0x30a4 <Set_ClockSystem+0x4e>
			{
				if (Hours>=0 && Hours<=12)
    308e:	80 91 dd 01 	lds	r24, 0x01DD
    3092:	8d 30       	cpi	r24, 0x0D	; 13
    3094:	38 f4       	brcc	.+14     	; 0x30a4 <Set_ClockSystem+0x4e>
				{
					Hours--;
    3096:	80 91 dd 01 	lds	r24, 0x01DD
    309a:	81 50       	subi	r24, 0x01	; 1
    309c:	80 93 dd 01 	sts	0x01DD, r24
					Mode =0;
    30a0:	10 92 f9 01 	sts	0x01F9, r1
				}
			}
	}

	if (Choice == MINS)
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	82 30       	cpi	r24, 0x02	; 2
    30a8:	e9 f4       	brne	.+58     	; 0x30e4 <Set_ClockSystem+0x8e>
	{
		if (Mode==INCREMENT)
    30aa:	80 91 f9 01 	lds	r24, 0x01F9
    30ae:	81 30       	cpi	r24, 0x01	; 1
    30b0:	39 f4       	brne	.+14     	; 0x30c0 <Set_ClockSystem+0x6a>
		{
			Minutes++;
    30b2:	80 91 00 02 	lds	r24, 0x0200
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	80 93 00 02 	sts	0x0200, r24
			Mode =0;
    30bc:	10 92 f9 01 	sts	0x01F9, r1
		}
		if (Mode==DECREMENT)
    30c0:	80 91 f9 01 	lds	r24, 0x01F9
    30c4:	82 30       	cpi	r24, 0x02	; 2
    30c6:	71 f4       	brne	.+28     	; 0x30e4 <Set_ClockSystem+0x8e>
		{
			if (Minutes ==0)
    30c8:	80 91 00 02 	lds	r24, 0x0200
    30cc:	88 23       	and	r24, r24
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <Set_ClockSystem+0x80>
			{
				Minutes=59;
    30d0:	8b e3       	ldi	r24, 0x3B	; 59
    30d2:	80 93 00 02 	sts	0x0200, r24
			}
			Minutes--;
    30d6:	80 91 00 02 	lds	r24, 0x0200
    30da:	81 50       	subi	r24, 0x01	; 1
    30dc:	80 93 00 02 	sts	0x0200, r24
			Mode =0;
    30e0:	10 92 f9 01 	sts	0x01F9, r1
		}
	}

	if (Choice == SECS)
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	83 30       	cpi	r24, 0x03	; 3
    30e8:	e9 f4       	brne	.+58     	; 0x3124 <Set_ClockSystem+0xce>
	{
		if (Mode==INCREMENT)
    30ea:	80 91 f9 01 	lds	r24, 0x01F9
    30ee:	81 30       	cpi	r24, 0x01	; 1
    30f0:	39 f4       	brne	.+14     	; 0x3100 <Set_ClockSystem+0xaa>
		{
			Seconds++;
    30f2:	80 91 01 02 	lds	r24, 0x0201
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	80 93 01 02 	sts	0x0201, r24
			Mode =0;
    30fc:	10 92 f9 01 	sts	0x01F9, r1
		}
		if (Mode==DECREMENT)
    3100:	80 91 f9 01 	lds	r24, 0x01F9
    3104:	82 30       	cpi	r24, 0x02	; 2
    3106:	71 f4       	brne	.+28     	; 0x3124 <Set_ClockSystem+0xce>
		{
			if (Seconds ==0)
    3108:	80 91 01 02 	lds	r24, 0x0201
    310c:	88 23       	and	r24, r24
    310e:	19 f4       	brne	.+6      	; 0x3116 <Set_ClockSystem+0xc0>
			{
				Seconds=59;
    3110:	8b e3       	ldi	r24, 0x3B	; 59
    3112:	80 93 01 02 	sts	0x0201, r24
			}
			Seconds--;
    3116:	80 91 01 02 	lds	r24, 0x0201
    311a:	81 50       	subi	r24, 0x01	; 1
    311c:	80 93 01 02 	sts	0x0201, r24
			Mode =0;
    3120:	10 92 f9 01 	sts	0x01F9, r1
		}
	}

	if (Choice == DAY)
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	84 30       	cpi	r24, 0x04	; 4
    3128:	b1 f4       	brne	.+44     	; 0x3156 <Set_ClockSystem+0x100>
		{
			if (Mode==INCREMENT)
    312a:	80 91 f9 01 	lds	r24, 0x01F9
    312e:	81 30       	cpi	r24, 0x01	; 1
    3130:	39 f4       	brne	.+14     	; 0x3140 <Set_ClockSystem+0xea>
			{
				Day++;
    3132:	80 91 de 01 	lds	r24, 0x01DE
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	80 93 de 01 	sts	0x01DE, r24
				Mode =0;
    313c:	10 92 f9 01 	sts	0x01F9, r1
			}
			if (Mode==DECREMENT)
    3140:	80 91 f9 01 	lds	r24, 0x01F9
    3144:	82 30       	cpi	r24, 0x02	; 2
    3146:	39 f4       	brne	.+14     	; 0x3156 <Set_ClockSystem+0x100>
			{
				Day--;
    3148:	80 91 de 01 	lds	r24, 0x01DE
    314c:	81 50       	subi	r24, 0x01	; 1
    314e:	80 93 de 01 	sts	0x01DE, r24
				Mode =0;
    3152:	10 92 f9 01 	sts	0x01F9, r1
			}
		}

	if (Choice == MON)
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	85 30       	cpi	r24, 0x05	; 5
    315a:	b1 f4       	brne	.+44     	; 0x3188 <Set_ClockSystem+0x132>
		{
			if (Mode==INCREMENT)
    315c:	80 91 f9 01 	lds	r24, 0x01F9
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	39 f4       	brne	.+14     	; 0x3172 <Set_ClockSystem+0x11c>
			{
				Month++;
    3164:	80 91 df 01 	lds	r24, 0x01DF
    3168:	8f 5f       	subi	r24, 0xFF	; 255
    316a:	80 93 df 01 	sts	0x01DF, r24
				Mode =0;
    316e:	10 92 f9 01 	sts	0x01F9, r1
			}
			if (Mode==DECREMENT)
    3172:	80 91 f9 01 	lds	r24, 0x01F9
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	39 f4       	brne	.+14     	; 0x3188 <Set_ClockSystem+0x132>
			{
				Month--;
    317a:	80 91 df 01 	lds	r24, 0x01DF
    317e:	81 50       	subi	r24, 0x01	; 1
    3180:	80 93 df 01 	sts	0x01DF, r24
				Mode =0;
    3184:	10 92 f9 01 	sts	0x01F9, r1
			}
		}

	if (Choice == YRS)
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	86 30       	cpi	r24, 0x06	; 6
    318c:	b1 f4       	brne	.+44     	; 0x31ba <Set_ClockSystem+0x164>
		{
			if (Mode==INCREMENT)
    318e:	80 91 f9 01 	lds	r24, 0x01F9
    3192:	81 30       	cpi	r24, 0x01	; 1
    3194:	39 f4       	brne	.+14     	; 0x31a4 <Set_ClockSystem+0x14e>
			{
				Year++;
    3196:	80 91 e0 01 	lds	r24, 0x01E0
    319a:	8f 5f       	subi	r24, 0xFF	; 255
    319c:	80 93 e0 01 	sts	0x01E0, r24
				Mode =0;
    31a0:	10 92 f9 01 	sts	0x01F9, r1
			}
			if (Mode==DECREMENT)
    31a4:	80 91 f9 01 	lds	r24, 0x01F9
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	39 f4       	brne	.+14     	; 0x31ba <Set_ClockSystem+0x164>
			{
				Year--;
    31ac:	80 91 e0 01 	lds	r24, 0x01E0
    31b0:	81 50       	subi	r24, 0x01	; 1
    31b2:	80 93 e0 01 	sts	0x01E0, r24
				Mode =0;
    31b6:	10 92 f9 01 	sts	0x01F9, r1
			}
		}

	if (Choice == DAYSTATE)
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	87 30       	cpi	r24, 0x07	; 7
    31be:	c1 f4       	brne	.+48     	; 0x31f0 <Set_ClockSystem+0x19a>
		{
			if (Mode==INCREMENT)
    31c0:	80 91 f9 01 	lds	r24, 0x01F9
    31c4:	81 30       	cpi	r24, 0x01	; 1
    31c6:	41 f4       	brne	.+16     	; 0x31d8 <Set_ClockSystem+0x182>
			{
					TOGGLE_BIT(DayState,0);
    31c8:	80 91 fd 01 	lds	r24, 0x01FD
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	89 27       	eor	r24, r25
    31d0:	80 93 fd 01 	sts	0x01FD, r24
					Mode =0;
    31d4:	10 92 f9 01 	sts	0x01F9, r1
			}
			if (Mode==DECREMENT)
    31d8:	80 91 f9 01 	lds	r24, 0x01F9
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	41 f4       	brne	.+16     	; 0x31f0 <Set_ClockSystem+0x19a>
			{
				TOGGLE_BIT(DayState,0);
    31e0:	80 91 fd 01 	lds	r24, 0x01FD
    31e4:	91 e0       	ldi	r25, 0x01	; 1
    31e6:	89 27       	eor	r24, r25
    31e8:	80 93 fd 01 	sts	0x01FD, r24
				Mode =0;
    31ec:	10 92 f9 01 	sts	0x01F9, r1
			}
		}
}
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <Clock>:


void Clock (void)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter =0;
	if (Option==NORMAL_MODE)
    3200:	80 91 fa 01 	lds	r24, 0x01FA
    3204:	88 23       	and	r24, r24
    3206:	d1 f4       	brne	.+52     	; 0x323c <Clock+0x44>
	{
		Local_u16Counter++;
    3208:	80 91 f4 01 	lds	r24, 0x01F4
    320c:	90 91 f5 01 	lds	r25, 0x01F5
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	90 93 f5 01 	sts	0x01F5, r25
    3216:	80 93 f4 01 	sts	0x01F4, r24

		if(Local_u16Counter==4000)
    321a:	80 91 f4 01 	lds	r24, 0x01F4
    321e:	90 91 f5 01 	lds	r25, 0x01F5
    3222:	2f e0       	ldi	r18, 0x0F	; 15
    3224:	80 3a       	cpi	r24, 0xA0	; 160
    3226:	92 07       	cpc	r25, r18
    3228:	49 f4       	brne	.+18     	; 0x323c <Clock+0x44>
		{
			Local_u16Counter=0;
    322a:	10 92 f5 01 	sts	0x01F5, r1
    322e:	10 92 f4 01 	sts	0x01F4, r1
			Seconds=Seconds+1;
    3232:	80 91 01 02 	lds	r24, 0x0201
    3236:	8f 5f       	subi	r24, 0xFF	; 255
    3238:	80 93 01 02 	sts	0x0201, r24
		}


	}
}
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <__divmodhi4>:
    3242:	97 fb       	bst	r25, 7
    3244:	09 2e       	mov	r0, r25
    3246:	07 26       	eor	r0, r23
    3248:	0a d0       	rcall	.+20     	; 0x325e <__divmodhi4_neg1>
    324a:	77 fd       	sbrc	r23, 7
    324c:	04 d0       	rcall	.+8      	; 0x3256 <__divmodhi4_neg2>
    324e:	0c d0       	rcall	.+24     	; 0x3268 <__udivmodhi4>
    3250:	06 d0       	rcall	.+12     	; 0x325e <__divmodhi4_neg1>
    3252:	00 20       	and	r0, r0
    3254:	1a f4       	brpl	.+6      	; 0x325c <__divmodhi4_exit>

00003256 <__divmodhi4_neg2>:
    3256:	70 95       	com	r23
    3258:	61 95       	neg	r22
    325a:	7f 4f       	sbci	r23, 0xFF	; 255

0000325c <__divmodhi4_exit>:
    325c:	08 95       	ret

0000325e <__divmodhi4_neg1>:
    325e:	f6 f7       	brtc	.-4      	; 0x325c <__divmodhi4_exit>
    3260:	90 95       	com	r25
    3262:	81 95       	neg	r24
    3264:	9f 4f       	sbci	r25, 0xFF	; 255
    3266:	08 95       	ret

00003268 <__udivmodhi4>:
    3268:	aa 1b       	sub	r26, r26
    326a:	bb 1b       	sub	r27, r27
    326c:	51 e1       	ldi	r21, 0x11	; 17
    326e:	07 c0       	rjmp	.+14     	; 0x327e <__udivmodhi4_ep>

00003270 <__udivmodhi4_loop>:
    3270:	aa 1f       	adc	r26, r26
    3272:	bb 1f       	adc	r27, r27
    3274:	a6 17       	cp	r26, r22
    3276:	b7 07       	cpc	r27, r23
    3278:	10 f0       	brcs	.+4      	; 0x327e <__udivmodhi4_ep>
    327a:	a6 1b       	sub	r26, r22
    327c:	b7 0b       	sbc	r27, r23

0000327e <__udivmodhi4_ep>:
    327e:	88 1f       	adc	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	5a 95       	dec	r21
    3284:	a9 f7       	brne	.-22     	; 0x3270 <__udivmodhi4_loop>
    3286:	80 95       	com	r24
    3288:	90 95       	com	r25
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	08 95       	ret

00003290 <__prologue_saves__>:
    3290:	2f 92       	push	r2
    3292:	3f 92       	push	r3
    3294:	4f 92       	push	r4
    3296:	5f 92       	push	r5
    3298:	6f 92       	push	r6
    329a:	7f 92       	push	r7
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	ca 1b       	sub	r28, r26
    32ba:	db 0b       	sbc	r29, r27
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	09 94       	ijmp

000032c8 <__epilogue_restores__>:
    32c8:	2a 88       	ldd	r2, Y+18	; 0x12
    32ca:	39 88       	ldd	r3, Y+17	; 0x11
    32cc:	48 88       	ldd	r4, Y+16	; 0x10
    32ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    32d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    32d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    32da:	b9 84       	ldd	r11, Y+9	; 0x09
    32dc:	c8 84       	ldd	r12, Y+8	; 0x08
    32de:	df 80       	ldd	r13, Y+7	; 0x07
    32e0:	ee 80       	ldd	r14, Y+6	; 0x06
    32e2:	fd 80       	ldd	r15, Y+5	; 0x05
    32e4:	0c 81       	ldd	r16, Y+4	; 0x04
    32e6:	1b 81       	ldd	r17, Y+3	; 0x03
    32e8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ea:	b9 81       	ldd	r27, Y+1	; 0x01
    32ec:	ce 0f       	add	r28, r30
    32ee:	d1 1d       	adc	r29, r1
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	ed 01       	movw	r28, r26
    32fc:	08 95       	ret

000032fe <_exit>:
    32fe:	f8 94       	cli

00003300 <__stop_program>:
    3300:	ff cf       	rjmp	.-2      	; 0x3300 <__stop_program>
